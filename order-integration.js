// ============================================
// –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –°–ß–ê–°–¢–õ–ò–í–´–• –ß–ê–°–û–í –ò –ë–û–ù–£–°–û–í –° –ó–ê–ö–ê–ó–ê–ú–ò
// ============================================

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞
let orderHappyHourDiscount = 0;
let orderBonusAmount = 0;
let orderOriginalPrice = 0;
let orderFinalPrice = 0;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–∫–∞–∑–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É
document.addEventListener('DOMContentLoaded', () => {
  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ "–ó–∞–∫–∞–∑–∞—Ç—å"
  const orderButtons = document.querySelectorAll('.order-btn');
  
  orderButtons.forEach(button => {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    const newButton = button.cloneNode(true);
    button.parentNode.replaceChild(newButton, button);
    
    newButton.addEventListener('click', async (e) => {
      const cocktailId = newButton.getAttribute('data-id');
      const name = newButton.getAttribute('data-name');
      const image = newButton.getAttribute('data-image');
      const price = parseInt(newButton.getAttribute('data-price')) || 0;
      
      const user = firebase.auth().currentUser;
      if (!user) {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∑–∞–∫–∞–∑–∞');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–∏—Å—Ç
      const stoplistDoc = await db.collection('stoplist').doc(cocktailId).get();
      if (stoplistDoc.exists) {
        const stoplistData = stoplistDoc.data();
        showError(`üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, "${name}" –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. ${stoplistData.reason || ''}`);
        return;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
      orderOriginalPrice = price;
      orderHappyHourDiscount = 0;
      orderBonusAmount = 0;
      orderFinalPrice = price;
      
      // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
      currentOrder = {
        cocktailId: cocktailId,
        name: name,
        image: image,
        price: price,
        originalPrice: price,
        discount: 0,
        promoCode: null,
        happyHourDiscount: 0,
        bonusDiscount: 0
      };
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
      await updateOrderDisplay(name, image, price);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      const orderModal = document.getElementById('orderModal');
      if (orderModal) {
        orderModal.style.display = 'block';
        document.body.classList.add('modal-open');
      }
    });
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
  const applyBonusBtn = document.getElementById('applyBonusBtn');
  applyBonusBtn?.addEventListener('click', () => {
    applyBonusToOrder();
  });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö —Å–∫–∏–¥–æ–∫
async function updateOrderDisplay(name, image, originalPrice) {
  const orderSummary = document.getElementById('orderSummary');
  const orderImagePreview = document.getElementById('orderImagePreview');
  const orderOriginalPriceEl = document.getElementById('orderOriginalPrice');
  const orderHappyHourDiscountEl = document.getElementById('orderHappyHourDiscount');
  const orderHHPercentEl = document.getElementById('orderHHPercent');
  const orderHHAmountEl = document.getElementById('orderHHAmount');
  const orderBonusSectionEl = document.getElementById('orderBonusSection');
  const orderAvailableBonusesEl = document.getElementById('orderAvailableBonuses');
  const orderBonusInputEl = document.getElementById('orderBonusInput');
  const orderBonusEarnEl = document.getElementById('orderBonusEarn');
  const orderBonusEarnAmountEl = document.getElementById('orderBonusEarnAmount');
  const orderPriceEl = document.getElementById('orderPrice');
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
  if (orderSummary) {
    orderSummary.innerHTML = `–í—ã –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ: <strong>${name}</strong>`;
  }
  
  if (orderImagePreview && image) {
    orderImagePreview.src = image;
    orderImagePreview.style.display = 'block';
  } else if (orderImagePreview) {
    orderImagePreview.style.display = 'none';
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ü–µ–Ω—É
  if (orderOriginalPriceEl) {
    orderOriginalPriceEl.textContent = `${originalPrice} ‚ÇΩ`;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö —á–∞—Å–æ–≤
  const hhDiscount = getHappyHourDiscount();
  let currentPrice = originalPrice;
  
  if (hhDiscount > 0) {
    const hhAmount = Math.round(originalPrice * hhDiscount / 100);
    orderHappyHourDiscount = hhAmount;
    currentPrice -= hhAmount;
    
    if (orderHHPercentEl) orderHHPercentEl.textContent = hhDiscount;
    if (orderHHAmountEl) orderHHAmountEl.textContent = hhAmount;
    if (orderHappyHourDiscountEl) orderHappyHourDiscountEl.style.display = 'flex';
  } else {
    if (orderHappyHourDiscountEl) orderHappyHourDiscountEl.style.display = 'none';
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –±–æ–Ω—É—Å–æ–≤, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  const user = firebase.auth().currentUser;
  if (user && orderBonusSectionEl) {
    const userBonuses = await getUserBonusBalance(user.uid);
    
    if (userBonuses > 0) {
      orderBonusSectionEl.style.display = 'block';
      
      if (orderAvailableBonusesEl) {
        orderAvailableBonusesEl.textContent = userBonuses;
      }
      
      if (orderBonusInputEl) {
        // –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        const maxBonusUsage = bonusSettings ? Math.floor(currentPrice * bonusSettings.maxUsage / 100) : Math.floor(currentPrice * 0.5);
        const maxBonusToUse = Math.min(userBonuses, maxBonusUsage);
        
        orderBonusInputEl.max = maxBonusToUse;
        orderBonusInputEl.placeholder = `–î–æ ${maxBonusToUse} –±–∞–ª–ª–æ–≤`;
      }
    } else {
      orderBonusSectionEl.style.display = 'none';
    }
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –±–æ–Ω—É—Å–æ–≤ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ
  if (bonusSettings && bonusSettings.active && currentPrice >= bonusSettings.minOrder) {
    const earnAmount = Math.floor(currentPrice * bonusSettings.percentage / 100);
    
    if (orderBonusEarnAmountEl) orderBonusEarnAmountEl.textContent = earnAmount;
    if (orderBonusEarnEl) orderBonusEarnEl.style.display = 'flex';
  } else {
    if (orderBonusEarnEl) orderBonusEarnEl.style.display = 'none';
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
  orderFinalPrice = currentPrice;
  if (orderPriceEl) {
    orderPriceEl.textContent = `${currentPrice} ‚ÇΩ`;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
  if (currentOrder) {
    currentOrder.price = currentPrice;
    currentOrder.originalPrice = originalPrice;
    currentOrder.happyHourDiscount = hhDiscount;
  }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –∫ –∑–∞–∫–∞–∑—É
function applyBonusToOrder() {
  const orderBonusInputEl = document.getElementById('orderBonusInput');
  const orderBonusMessageEl = document.getElementById('orderBonusMessage');
  const orderBonusDiscountEl = document.getElementById('orderBonusDiscount');
  const orderBonusAmountEl = document.getElementById('orderBonusAmount');
  const orderPriceEl = document.getElementById('orderPrice');
  const orderBonusEarnEl = document.getElementById('orderBonusEarn');
  const orderBonusEarnAmountEl = document.getElementById('orderBonusEarnAmount');
  
  if (!orderBonusInputEl) return;
  
  const bonusToUse = parseInt(orderBonusInputEl.value) || 0;
  const maxBonus = parseInt(orderBonusInputEl.max) || 0;
  
  if (bonusToUse <= 0) {
    if (orderBonusMessageEl) {
      orderBonusMessageEl.textContent = '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤';
      orderBonusMessageEl.className = 'bonus-message error';
    }
    return;
  }
  
  if (bonusToUse > maxBonus) {
    if (orderBonusMessageEl) {
      orderBonusMessageEl.textContent = `–ú–∞–∫—Å–∏–º—É–º ${maxBonus} –±–∞–ª–ª–æ–≤`;
      orderBonusMessageEl.className = 'bonus-message error';
    }
    return;
  }
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã
  orderBonusAmount = bonusToUse;
  const priceAfterHH = orderOriginalPrice - orderHappyHourDiscount;
  orderFinalPrice = priceAfterHH - bonusToUse;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  if (orderBonusAmountEl) orderBonusAmountEl.textContent = bonusToUse;
  if (orderBonusDiscountEl) orderBonusDiscountEl.style.display = 'flex';
  
  if (orderPriceEl) {
    orderPriceEl.textContent = `${orderFinalPrice} ‚ÇΩ`;
  }
  
  if (orderBonusMessageEl) {
    orderBonusMessageEl.textContent = `‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ ${bonusToUse} –±–æ–Ω—É—Å–æ–≤`;
    orderBonusMessageEl.className = 'bonus-message success';
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ (—Ç–µ–ø–µ—Ä—å –Ω–∞—á–∏—Å–ª–∏–º –º–µ–Ω—å—à–µ, —Ç–∞–∫ –∫–∞–∫ –æ–ø–ª–∞—Ç–∏–ª–∏ –±–æ–Ω—É—Å–∞–º–∏)
  if (bonusSettings && bonusSettings.active && orderFinalPrice >= bonusSettings.minOrder) {
    const earnAmount = Math.floor(orderFinalPrice * bonusSettings.percentage / 100);
    if (orderBonusEarnAmountEl) orderBonusEarnAmountEl.textContent = earnAmount;
    if (orderBonusEarnEl) orderBonusEarnEl.style.display = 'flex';
  } else {
    if (orderBonusEarnEl) orderBonusEarnEl.style.display = 'none';
  }
  
  // –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
  orderBonusInputEl.disabled = true;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞
  if (currentOrder) {
    currentOrder.bonusDiscount = bonusToUse;
    currentOrder.price = orderFinalPrice;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É
const originalConfirmOrder = document.getElementById('confirmOrder');
if (originalConfirmOrder) {
  const newConfirmOrder = originalConfirmOrder.cloneNode(true);
  originalConfirmOrder.parentNode.replaceChild(newConfirmOrder, originalConfirmOrder);
  
  newConfirmOrder.addEventListener('click', async () => {
    if (!currentOrder) return;
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–ª–∏–∫–∏
    if (newConfirmOrder.disabled || newConfirmOrder.classList.contains('loading')) {
      return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    newConfirmOrder.classList.add('loading');
    newConfirmOrder.disabled = true;
    const originalText = newConfirmOrder.innerHTML;
    newConfirmOrder.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑...';
    
    try {
      const user = firebase.auth().currentUser;
      if (!user) {
        throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }
      
      // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–æ–Ω—É—Å—ã - —Å–ø–∏—Å—ã–≤–∞–µ–º –∏—Ö
      if (orderBonusAmount > 0) {
        const success = await spendBonusPoints(user.uid, orderBonusAmount, `pending_${Date.now()}`);
        if (!success) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –±–æ–Ω—É—Å—ã');
        }
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏
      const queuePosition = await getNextQueuePosition();
      
      // –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
      const orderData = {
        name: currentOrder.name,
        cocktailId: currentOrder.cocktailId,
        cocktailImage: currentOrder.image || '',
        user: user.displayName || '–ì–æ—Å—Ç—å',
        userId: user.uid,
        status: 'confirmed',
        queuePosition: queuePosition,
        originalPrice: orderOriginalPrice,
        happyHourDiscount: orderHappyHourDiscount,
        bonusDiscount: orderBonusAmount,
        finalPrice: orderFinalPrice,
        createdAt: firebase.firestore.FieldValue.serverTimestamp(),
        displayTime: new Date().toLocaleString('ru-RU'),
        updatedAt: firebase.firestore.FieldValue.serverTimestamp()
      };
      
      const docRef = await db.collection('orders').add(orderData);
      console.log('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω:', docRef.id);
      
      // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
      if (orderFinalPrice > 0) {
        await awardBonusPoints(user.uid, orderFinalPrice, docRef.id);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await addOrderToBill(user.uid, {
        ...orderData,
        orderId: docRef.id,
        timestamp: firebase.firestore.FieldValue.serverTimestamp()
      });
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫–∞–∑–∞
      const orderModal = document.getElementById('orderModal');
      if (orderModal) {
        orderModal.style.display = 'none';
        document.body.classList.remove('modal-open');
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫–∞–∑–µ
      showNotification();
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      currentOrder = null;
      orderHappyHourDiscount = 0;
      orderBonusAmount = 0;
      orderOriginalPrice = 0;
      orderFinalPrice = 0;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤
      await updateBonusDisplay();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
      showError('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑.');
    } finally {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
      newConfirmOrder.classList.remove('loading');
      newConfirmOrder.disabled = false;
      newConfirmOrder.innerHTML = originalText;
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)
if (typeof getNextQueuePosition === 'undefined') {
  async function getNextQueuePosition() {
    try {
      const activeOrdersSnapshot = await db.collection('orders')
        .where('status', 'in', ['confirmed', 'preparing', 'ready'])
        .orderBy('queuePosition', 'desc')
        .limit(1)
        .get();
      
      if (activeOrdersSnapshot.empty) {
        return 1;
      }
      
      const lastOrder = activeOrdersSnapshot.docs[0];
      const lastPosition = lastOrder.data().queuePosition || 0;
      return lastPosition + 1;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏:', error);
      return Date.now();
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ —Å—á–µ—Ç (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞)
if (typeof addOrderToBill === 'undefined') {
  async function addOrderToBill(userId, orderData) {
    try {
      const userBillsSnapshot = await db.collection('bills')
        .where('userId', '==', userId)
        .where('status', '==', 'open')
        .limit(1)
        .get();
      
      if (!userBillsSnapshot.empty) {
        const billDoc = userBillsSnapshot.docs[0];
        const billData = billDoc.data();
        
        await db.collection('bills').doc(billDoc.id).update({
          items: firebase.firestore.FieldValue.arrayUnion(orderData),
          totalAmount: firebase.firestore.FieldValue.increment(orderData.finalPrice),
          updatedAt: firebase.firestore.FieldValue.serverTimestamp()
        });
      } else {
        const user = firebase.auth().currentUser;
        await db.collection('bills').add({
          userId: userId,
          userName: user ? user.displayName || '–ì–æ—Å—Ç—å' : '–ì–æ—Å—Ç—å',
          items: [orderData],
          totalAmount: orderData.finalPrice,
          originalTotal: orderData.finalPrice,
          discount: 0,
          status: 'open',
          createdAt: firebase.firestore.FieldValue.serverTimestamp(),
          updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
          paidAt: null,
          paymentMethod: null,
          paymentId: null
        });
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—á–µ—Ç:', error);
    }
  }
}

console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö —á–∞—Å–æ–≤ –∏ –±–æ–Ω—É—Å–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

