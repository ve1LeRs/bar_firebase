// üî• –¢–í–û–ò –ö–õ–Æ–ß–ò FIREBASE
const firebaseConfig = {
  apiKey: "AIzaSyB4bD8UAu0Aj5IRK5H-uZg6kxNAIbkZc9k",
  authDomain: "bar-menu-6145c.firebaseapp.com",
  projectId: "bar-menu-6145c",
  storageBucket: "bar-menu-6145c.appspot.com",
  messagingSenderId: "493608422842",
  appId: "1:493608422842:web:3b4b6bd8a4cb681c436183"
};
// ü§ñ TELEGRAM
const TELEGRAM_BOT_TOKEN = "8326139522:AAG2fwHYd1vRPx0cUXt4ATaFYTNxmzInWJo";
const TELEGRAM_CHAT_ID = "1743362083";

// üåê WEBHOOK SERVER
const WEBHOOK_SERVER_URL = "https://barwebhook-production.up.railway.app";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const app = firebase.initializeApp(firebaseConfig);
const auth = firebase.auth();
const db = firebase.firestore();
const storage = firebase.storage();

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const themeToggle = document.getElementById('themeToggle');
const loginBtn = document.getElementById('loginBtn');
const registerBtn = document.getElementById('registerBtn');
const logoutBtn = document.getElementById('logoutBtn');
const ordersBtn = document.getElementById('ordersBtn');
const adminBtn = document.getElementById('adminBtn');
const userName = document.getElementById('userName');
const authModal = document.getElementById('authModal');
const registerModal = document.getElementById('registerModal');
const successModal = document.getElementById('successModal');
const errorModal = document.getElementById('errorModal');
const ordersModal = document.getElementById('ordersModal');
const notificationModal = document.getElementById('notificationModal');
const adminPanel = document.getElementById('adminPanel');
const cocktailFormModal = document.getElementById('cocktailFormModal');
const statusModal = document.getElementById('statusModal');
const modalTitle = document.getElementById('modalTitle');
const authForm = document.getElementById('authForm');
const registerForm = document.getElementById('registerForm');
const toggleForm = document.getElementById('toggleForm');
const switchToRegister = document.getElementById('switchToRegister');
const closeBtns = document.querySelectorAll('.close');
const orderButtons = document.querySelectorAll('.order-btn');
const orderModal = document.getElementById('orderModal');
const orderSummary = document.getElementById('orderSummary');
const confirmOrderBtn = document.getElementById('confirmOrder');
const ordersList = document.getElementById('ordersList');
const closeNotification = document.getElementById('closeNotification');
const closeSuccess = document.getElementById('closeSuccess');
const closeError = document.getElementById('closeError');
const champagneAnimation = document.getElementById('champagneAnimation');
const cocktailsGrid = document.querySelector('.cocktails-grid');
const errorMessage = document.getElementById('errorMessage');
const addCocktailBtn = document.getElementById('addCocktailBtn');
const cocktailForm = document.getElementById('cocktailForm');
const cocktailsList = document.getElementById('cocktailsList');
const adminOrdersList = document.getElementById('adminOrdersList');
const stoplistCocktails = document.getElementById('stoplistCocktails');
const addToStoplist = document.getElementById('addToStoplist');
const currentStoplist = document.getElementById('currentStoplist');
const stopReason = document.getElementById('stopReason');
const tabBtns = document.querySelectorAll('.tab-btn');
const tabContents = document.querySelectorAll('.tab-content');
const statusButtons = document.querySelectorAll('.status-btn');
const statusOrderInfo = document.getElementById('statusOrderInfo');
const checkSystemBtn = document.getElementById('checkSystemBtn');
const testWebhookBtn = document.getElementById('testWebhookBtn');
const systemStatus = document.getElementById('systemStatus');
const setupWebhookBtn = document.getElementById('setupWebhookBtn');
const deleteWebhookBtn = document.getElementById('deleteWebhookBtn');
const getWebhookInfoBtn = document.getElementById('getWebhookInfoBtn');
const sendTestMessageBtn = document.getElementById('sendTestMessageBtn');
const telegramStatus = document.getElementById('telegramStatus');

let currentOrder = null;
let startX = 0;
let startY = 0;
let currentCard = null;
let currentOrderId = null;
let isAdmin = false;
let cocktailsData = [];
let stoplistData = [];

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
let scrollY = 0;

// === –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ú–û–î–ê–õ–¨–ù–´–ú–ò –û–ö–ù–ê–ú–ò ===

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π —Ñ–æ–Ω–∞
function openModal(modalElement) {
  if (!modalElement) {
    console.warn('–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ');
    return;
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
  scrollY = window.scrollY;
  document.body.style.setProperty('--scroll-y', `${scrollY}px`);
  document.body.classList.add('modal-open');
  modalElement.style.display = 'block';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal(modalElement) {
  if (!modalElement) {
    console.warn('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ');
    return;
  }
  
  modalElement.style.display = 'none';
  document.body.classList.remove('modal-open');
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
  window.scrollTo(0, scrollY);
}

// === –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ô –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ú–û–î–ê–õ–¨–ù–´–ú–ò –û–ö–ù–ê–ú–ò ===

// –°–æ–∑–¥–∞–µ–º –º–µ—Ä—Ü–∞—é—â–∏–µ –æ–≥–æ–Ω—å–∫–∏
function createSparkles() {
  const sparklesContainer = document.querySelector('.sparkles');
  if (sparklesContainer) {
    sparklesContainer.innerHTML = '';
    for (let i = 1; i <= 30; i++) {
      const sparkle = document.createElement('div');
      sparkle.className = 'sparkle';
      sparkle.style.left = Math.random() * 100 + '%';
      sparkle.style.top = Math.random() * 100 + '%';
      sparkle.style.animationDelay = Math.random() * 4 + 's';
      sparkle.style.width = (Math.random() * 4 + 2) + 'px';
      sparkle.style.height = sparkle.style.width;
      sparkle.style.opacity = Math.random() * 0.8 + 0.2;
      sparklesContainer.appendChild(sparkle);
    }
  }
}

// –í—ã–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–≥–æ–Ω—å–∫–æ–≤
createSparkles();

// –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã
function initThemeToggle() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
  const savedTheme = localStorage.getItem('theme');
  if (savedTheme === 'dark') {
    document.body.classList.add('dark-theme');
    themeToggle.innerHTML = '<i class="fas fa-sun"></i>';
  } else {
    themeToggle.innerHTML = '<i class="fas fa-moon"></i>';
  }

  themeToggle.addEventListener('click', () => {
    document.body.classList.toggle('dark-theme');
    if (document.body.classList.contains('dark-theme')) {
      localStorage.setItem('theme', 'dark');
      themeToggle.innerHTML = '<i class="fas fa-sun"></i>';
    } else {
      localStorage.setItem('theme', 'light');
      themeToggle.innerHTML = '<i class="fas fa-moon"></i>';
    }
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ–≥–æ–Ω—å–∫–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–µ–º—ã
    setTimeout(createSparkles, 100);
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤–∞–π–ø–∞
function initSwipe() {
  const cocktailCards = document.querySelectorAll('.cocktail-card');
  cocktailCards.forEach(card => {
    // Touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    card.addEventListener('touchstart', handleTouchStart, false);
    card.addEventListener('touchmove', handleTouchMove, false);
    card.addEventListener('touchend', handleTouchEnd, false);
    
    // Mouse —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
    card.addEventListener('mousedown', handleMouseDown, false);
    card.addEventListener('mousemove', handleMouseMove, false);
    card.addEventListener('mouseup', handleMouseUp, false);
    card.addEventListener('mouseleave', handleMouseLeave, false);
  });
}

function handleTouchStart(e) {
  const touch = e.touches[0];
  startX = touch.clientX;
  startY = touch.clientY;
  currentCard = e.currentTarget;
  currentCard.classList.add('swipe-active');
}

function handleTouchMove(e) {
  if (!startX || !currentCard) return;
  
  const touch = e.touches[0];
  const diffX = touch.clientX - startX;
  const diffY = touch.clientY - startY;
  
  // –¢–æ–ª—å–∫–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
  if (Math.abs(diffX) > Math.abs(diffY)) {
    e.preventDefault();
    const progress = Math.min(1, Math.max(0, diffX / 150));
    currentCard.style.setProperty('--swipe-progress', progress);
    currentCard.style.transform = `translateX(${diffX}px)`;
    currentCard.style.opacity = 1 - Math.abs(diffX) / 300;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–∞–π–ø–∞
    if (diffX > 50) {
      currentCard.classList.add('swipe-right');
    } else {
      currentCard.classList.remove('swipe-right');
    }
  }
}

function handleTouchEnd(e) {
  if (!startX || !currentCard) return;
  
  const touch = e.changedTouches[0];
  const diffX = touch.clientX - startX;
  
  if (Math.abs(diffX) > 100) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è —Å–≤–∞–π–ø–∞
    if (diffX > 0) {
      // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –∑–∞–∫–∞–∑–∞—Ç—å
      const name = currentCard.getAttribute('data-name');
      // –ê–Ω–∏–º–∞—Ü–∏—è –∫–æ–º–º–∏—Ç–∞ —Å–≤–∞–π–ø–∞
      currentCard.dataset.committing = '1';
      currentCard.classList.add('swipe-commit');
      currentCard.style.transition = 'transform 0.35s ease, opacity 0.35s ease';
      currentCard.style.transform = 'translateX(120%)';
      currentCard.style.opacity = '0';
      // –¢—Ä–∏–≥–≥–µ—Ä–∏–º –∑–∞–∫–∞–∑
      triggerDirectOrder(name);
      // –°–±—Ä–æ—Å–∏–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      setTimeout(() => {
        if (!currentCard) return;
        currentCard.style.transition = '';
        currentCard.style.transform = '';
        currentCard.style.opacity = '';
        currentCard.classList.remove('swipe-active', 'swipe-right', 'swipe-commit');
        currentCard.style.removeProperty('--swipe-progress');
        delete currentCard.dataset.committing;
        currentCard = null;
        startX = 0;
        startY = 0;
      }, 380);
      return;
    }
  }
  
  // –°–±—Ä–æ—Å —Å—Ç–∏–ª–µ–π
  currentCard.style.transform = '';
  currentCard.style.opacity = '';
  currentCard.classList.remove('swipe-active', 'swipe-right');
  currentCard.style.removeProperty('--swipe-progress');
  currentCard = null;
  startX = 0;
  startY = 0;
}

function handleMouseDown(e) {
  startX = e.clientX;
  startY = e.clientY;
  currentCard = e.currentTarget;
  currentCard.classList.add('swipe-active');
}

function handleMouseMove(e) {
  if (!startX || !currentCard) return;
  
  const diffX = e.clientX - startX;
  const diffY = e.clientY - startY;
  
  // –¢–æ–ª—å–∫–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
  if (Math.abs(diffX) > Math.abs(diffY)) {
    const progress = Math.min(1, Math.max(0, diffX / 150));
    currentCard.style.setProperty('--swipe-progress', progress);
    currentCard.style.transform = `translateX(${diffX}px)`;
    currentCard.style.opacity = 1 - Math.abs(diffX) / 300;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–∞–π–ø–∞
    if (diffX > 50) {
      currentCard.classList.add('swipe-right');
    } else {
      currentCard.classList.remove('swipe-right');
    }
  }
}

function handleMouseUp(e) {
  if (!startX || !currentCard) return;
  
  const diffX = e.clientX - startX;
  
  if (Math.abs(diffX) > 100) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è —Å–≤–∞–π–ø–∞
    if (diffX > 0) {
      // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –∑–∞–∫–∞–∑–∞—Ç—å
      const name = currentCard.getAttribute('data-name');
      // –ê–Ω–∏–º–∞—Ü–∏—è –∫–æ–º–º–∏—Ç–∞ —Å–≤–∞–π–ø–∞
      currentCard.dataset.committing = '1';
      currentCard.classList.add('swipe-commit');
      currentCard.style.transition = 'transform 0.35s ease, opacity 0.35s ease';
      currentCard.style.transform = 'translateX(120%)';
      currentCard.style.opacity = '0';
      triggerDirectOrder(name);
      setTimeout(() => {
        if (!currentCard) return;
        currentCard.style.transition = '';
        currentCard.style.transform = '';
        currentCard.style.opacity = '';
        currentCard.classList.remove('swipe-active', 'swipe-right', 'swipe-commit');
        currentCard.style.removeProperty('--swipe-progress');
        delete currentCard.dataset.committing;
        currentCard = null;
        startX = 0;
        startY = 0;
      }, 380);
      return;
    }
  }
  
  // –°–±—Ä–æ—Å —Å—Ç–∏–ª–µ–π
  currentCard.style.transform = '';
  currentCard.style.opacity = '';
  currentCard.classList.remove('swipe-active', 'swipe-right');
  currentCard.style.removeProperty('--swipe-progress');
  currentCard = null;
  startX = 0;
  startY = 0;
}

function handleMouseLeave(e) {
  if (currentCard) {
    // –°–±—Ä–æ—Å —Å—Ç–∏–ª–µ–π
    currentCard.style.transform = '';
    currentCard.style.opacity = '';
    currentCard.classList.remove('swipe-active', 'swipe-right');
    currentCard.style.removeProperty('--swipe-progress');
    currentCard = null;
    startX = 0;
    startY = 0;
  }
}

// –ü—Ä—è–º–æ–π –∑–∞–∫–∞–∑ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async function triggerDirectOrder(name) {
  const user = auth.currentUser;
  if (!user) {
    showError('üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –∑–∞–∫–∞–∑–∞.');
    return;
  }
  
  const card = document.querySelector(`.cocktail-card[data-name="${name}"]`);
  if (!card) return;
  
  // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –∑–∞–∫–∞–∑–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
  const orderBtn = card.querySelector('.order-btn');
  if (!orderBtn || orderBtn.disabled || orderBtn.classList.contains('loading')) {
    return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–ª–∏–∫–∏
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ –ª–∏ –∫–æ–∫—Ç–µ–π–ª—å
  const isInStoplist = stoplistData.some(item => item.cocktailName === name);
  if (isInStoplist) {
    showError(`‚ùå ${name} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: ${stoplistData.find(item => item.cocktailName === name).reason}`);
    return;
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  orderBtn.classList.add('loading');
  orderBtn.disabled = true;
  const originalText = orderBtn.innerHTML;
  orderBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –ó–∞–∫–∞–∑—ã–≤–∞–µ–º...';
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const imgElement = card.querySelector('img');
  const imgSrc = imgElement ? imgElement.src : '';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
  const hasRealImage = imgSrc && !imgSrc.includes('5d5d5d') && !imgSrc.includes('placeholder');
  
  const order = {
    name,
    user: user.displayName || "–ì–æ—Å—Ç—å",
    userId: user.uid,
    displayTime: new Date().toLocaleString('ru-RU'),
    createdAt: firebase.firestore.FieldValue.serverTimestamp ? firebase.firestore.FieldValue.serverTimestamp() : new Date(),
    image: hasRealImage ? imgSrc : '',
    status: 'pending'
  };
  
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ Firestore
    const docRef = await db.collection('orders').add(order);

    const message = `
üÜï *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ Asafiev Bar!*
üç∏ *–ö–æ–∫—Ç–µ–π–ª—å:* ${order.name}
üë§ *–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:* ${order.user}
üïí *–í—Ä–µ–º—è:* ${order.displayTime}
üÜî *ID –∑–∞–∫–∞–∑–∞:* ${docRef.id}
        `.trim();

    // –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
    const inlineKeyboard = {
      inline_keyboard: [
        [
          { text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: `confirmed_${docRef.id}` },
          { text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: `cancelled_${docRef.id}` }
        ],
        [
          { text: "üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è", callback_data: `preparing_${docRef.id}` },
          { text: "üç∏ –ì–æ—Ç–æ–≤", callback_data: `ready_${docRef.id}` }
        ],
        [
          { text: "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω", callback_data: `completed_${docRef.id}` }
        ]
      ]
    };

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω –ª–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª –≤ URL Telegram API
    const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    const response = await fetch(telegramUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'Markdown',
        reply_markup: inlineKeyboard
      })
    });
    
    if (!response.ok) {
      throw new Error(`Telegram API error: ${response.status}`);
    }

    // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫–∞–∑–µ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
    if (navigator.vibrate) {
      navigator.vibrate([200, 100, 200]);
    } else if ('ontouchstart' in window || navigator.maxTouchPoints > 0) {
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      try {
        if (window.Telegram && window.Telegram.WebApp) {
          window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');
        }
      } catch (e) {
        console.log('Haptic feedback not available');
      }
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è —à–∞–º–ø–∞–Ω—Å–∫–æ–≥–æ
    createChampagneAnimation();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    openModal(notificationModal); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    currentOrder = null;
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞:", error);
    showError('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑.');
  } finally {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    if (orderBtn) {
      orderBtn.classList.remove('loading');
      orderBtn.disabled = false;
      orderBtn.innerHTML = originalText;
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
auth.onAuthStateChanged(async user => {
  if (user) {
    loginBtn.style.display = 'none';
    registerBtn.style.display = 'none';
    ordersBtn.style.display = 'inline-block';
    logoutBtn.style.display = 'inline-block';
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const userDoc = await db.collection('users').doc(user.uid).get();
    if (userDoc.exists) {
      const userData = userDoc.data();
      isAdmin = userData.role === 'admin';
      if (isAdmin) {
        adminBtn.style.display = 'inline-block';
      }
    }
    // üëá –ï—Å–ª–∏ displayName –ø—É—Å—Ç ‚Äî –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    if (!user.displayName) {
      await user.reload();
    }
    userName.textContent = user.displayName || "–ì–æ—Å—Ç—å";
    userName.style.display = 'block';
  } else {
    loginBtn.style.display = 'inline-block';
    registerBtn.style.display = 'inline-block';
    ordersBtn.style.display = 'none';
    adminBtn.style.display = 'none';
    logoutBtn.style.display = 'none';
    userName.textContent = '';
    userName.style.display = 'none';
    isAdmin = false;
  }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–∫—Ç–µ–π–ª–µ–π
async function loadCocktails() {
  try {
    const cocktailsSnapshot = await db.collection('cocktails').get();
    cocktailsData = [];
    cocktailsGrid.innerHTML = '';
    
    cocktailsSnapshot.forEach(doc => {
      const cocktail = { id: doc.id, ...doc.data() };
      cocktailsData.push(cocktail);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ –ª–∏ –∫–æ–∫—Ç–µ–π–ª—å
      const isInStoplist = stoplistData.some(item => item.cocktailName === cocktail.name);
      
      const cocktailCard = document.createElement('div');
      cocktailCard.className = `cocktail-card ${isInStoplist ? 'stopped' : ''}`;
      cocktailCard.setAttribute('data-name', cocktail.name);
      cocktailCard.setAttribute('data-alcohol', cocktail.alcohol || 0);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const imageUrl = cocktail.image || 'https://i.pinimg.com/736x/5d/5d/5d/5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d.jpg';
      const hasImage = imageUrl && !imageUrl.includes('5d5d5d');
      const displayImage = hasImage ? imageUrl : '';
      
      cocktailCard.innerHTML = `
        <div class="image-container">
          ${displayImage ? 
            `<img src="${displayImage}" alt="${cocktail.name}">` : 
            `<div class="no-image-placeholder">
              <i class="fas fa-camera"></i>
              <p>–ö–æ–∫—Ç–µ–π–ª—å —É–∂–µ –¥–µ–ª–∞–µ—Ç —Å–µ–ª—Ñ–∏,<br>—Å–∫–æ—Ä–æ –≤—ã–ª–æ–∂–∏—Ç —Å—é–¥–∞</p>
            </div>`
          }
          ${(cocktail.alcohol !== undefined && cocktail.alcohol !== null) ? `
            <div class="alcohol-indicator">
              <i class="fas fa-wine-bottle"></i>
              <span class="alcohol-percent">${cocktail.alcohol}%</span>
            </div>
          ` : ''}
          ${isInStoplist ? `
            <div class="stoplist-badge">
              <i class="fas fa-ban"></i> –í —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ
            </div>
          ` : ''}
          ${isAdmin ? `
            <div class="admin-actions">
              <button class="edit-btn" data-id="${cocktail.id}"><i class="fas fa-edit"></i></button>
              <button class="delete-btn" data-id="${cocktail.id}"><i class="fas fa-trash"></i></button>
            </div>
          ` : ''}
        </div>
        <div class="card-content">
          <h2>${cocktail.name}</h2>
          <!-- –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–°–æ—Å—Ç–∞–≤ –Ω–µ —É–∫–∞–∑–∞–Ω" -->
          <p class="ingredients">${(typeof cocktail.ingredients === 'string' && cocktail.ingredients.trim()) || '–°–æ—Å—Ç–∞–≤ –Ω–µ —É–∫–∞–∑–∞–Ω'}</p>
          <p class="mood">${cocktail.mood || ''}</p>
          ${!isInStoplist ? `
            <button class="order-btn" data-name="${cocktail.name}">
              <i class="fas fa-glass-martini-alt"></i> –ó–∞–∫–∞–∑–∞—Ç—å
            </button>
          ` : `
            <button class="order-btn disabled" disabled>
              <i class="fas fa-ban"></i> –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            </button>
          `}
        </div>
      `;
      
      cocktailsGrid.appendChild(cocktailCard);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
    if (isAdmin) {
      document.querySelectorAll('.edit-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.stopPropagation();
          const id = btn.getAttribute('data-id');
          editCocktail(id);
        });
      });
      
      document.querySelectorAll('.delete-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.stopPropagation();
          const id = btn.getAttribute('data-id');
          deleteCocktail(id);
        });
      });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–∞–π–ø –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    initSwipe();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–∫—Ç–µ–π–ª–µ–π:', error);
    showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–∫—Ç–µ–π–ª–µ–π');
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞
async function loadStoplist() {
  try {
    const stoplistSnapshot = await db.collection('stoplist').get();
    stoplistData = [];
    currentStoplist.innerHTML = '';
    
    stoplistSnapshot.forEach(doc => {
      const item = { id: doc.id, ...doc.data() };
      stoplistData.push(item);
      
      const stoplistItem = document.createElement('div');
      stoplistItem.className = 'stoplist-item';
      stoplistItem.innerHTML = `
        <div class="stoplist-info">
          <strong>${item.cocktailName}</strong>
          <span>${item.reason}</span>
          <small>${item.timestamp}</small>
        </div>
        ${isAdmin ? `
          <button class="remove-from-stoplist" data-id="${item.id}">
            <i class="fas fa-times"></i>
          </button>
        ` : ''}
      `;
      
      currentStoplist.appendChild(stoplistItem);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞
    if (isAdmin) {
      document.querySelectorAll('.remove-from-stoplist').forEach(btn => {
        btn.addEventListener('click', () => {
          const id = btn.getAttribute('data-id');
          removeFromStoplist(id);
        });
      });
    }
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–∫—Ç–µ–π–ª–∏, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã
    await loadCocktails();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞:', error);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ (–±–µ–∑ –∏–Ω–¥–µ–∫—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)
async function loadOrderHistory(userId) {
  try {
    const ordersSnapshot = await db.collection('orders')
      .orderBy('createdAt', 'desc')
      .get();
    
    ordersList.innerHTML = '';
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    const userOrders = [];
    ordersSnapshot.forEach(doc => {
      const order = doc.data();
      if (order.userId === userId) {
        userOrders.push({ id: doc.id, ...order });
      }
    });
    
    if (userOrders.length === 0) {
      ordersList.innerHTML = '<p class="no-orders">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>';
      return;
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    userOrders.sort((a, b) => {
      const aTime = a.createdAt?.toDate ? a.createdAt.toDate().getTime() : (a.displayTime ? Date.parse(a.displayTime) : 0);
      const bTime = b.createdAt?.toDate ? b.createdAt.toDate().getTime() : (b.displayTime ? Date.parse(b.displayTime) : 0);
      return bTime - aTime;
    });
    
    userOrders.forEach(order => {
      const orderElement = document.createElement('div');
      orderElement.className = 'order-item';
      orderElement.innerHTML = `
        <div class="order-header">
          <span class="order-name">${order.name}</span>
          <span class="order-status ${order.status || 'pending'}">${getStatusText(order.status)}</span>
        </div>
        <div class="order-time" style="font-size: 1.1rem;">${order.displayTime || (order.createdAt?.toDate ? order.createdAt.toDate().toLocaleString('ru-RU') : '')}</div>
      `;
      ordersList.appendChild(orderElement);
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
    showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤');
  }
}

// === –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò ===

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async function loadAdminOrders() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    const ordersSnapshot = await db.collection('orders')
      .orderBy('createdAt', 'desc')
      .get();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç adminOrdersList
    if (!adminOrdersList) {
      console.error('–≠–ª–µ–º–µ–Ω—Ç adminOrdersList –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM');
      return;
    }

    adminOrdersList.innerHTML = '';

    if (ordersSnapshot.empty) {
      adminOrdersList.innerHTML = '<p class="no-orders">–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>';
      return;
    }

    ordersSnapshot.forEach(doc => {
      const order = { id: doc.id, ...doc.data() };
      const orderElement = document.createElement('div');
      orderElement.className = 'admin-order-item';
      orderElement.innerHTML = `
        <div class="admin-order-header">
          <div>
            <strong>${order.name}</strong>
            <div>–ö–ª–∏–µ–Ω—Ç: ${order.user || '–ì–æ—Å—Ç—å'}</div>
            <small>ID: ${order.id}</small>
            <small>${order.timestamp}</small>
          </div>
          <div>
            <div class="admin-order-status ${order.status || 'pending'}">${getStatusText(order.status)}</div>
            <button class="change-status-btn" data-id="${order.id}">
              <i class="fas fa-edit"></i> –°—Ç–∞—Ç—É—Å
            </button>
          </div>
        </div>
      `;
      adminOrdersList.appendChild(orderElement);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    document.querySelectorAll('.change-status-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation();
        const orderId = btn.getAttribute('data-id');
        openStatusModal(orderId);
      });
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:', error);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç adminOrdersList –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    if (adminOrdersList) {
      adminOrdersList.innerHTML = '<p class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤</p>';
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
function openStatusModal(orderId) {
  currentOrderId = orderId;
  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞
  const orderElement = document.querySelector(`.change-status-btn[data-id="${orderId}"]`)?.closest('.admin-order-item');
  if (!orderElement) {
    console.error(`–≠–ª–µ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞ —Å ID ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return;
  }
  
  const orderName = orderElement.querySelector('strong')?.textContent || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–∫–∞–∑';
  const orderUser = orderElement.querySelector('div > div:nth-child(2)')?.textContent || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ statusOrderInfo –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
  if (statusOrderInfo) {
    statusOrderInfo.innerHTML = `
      <p><strong>–ö–æ–∫—Ç–µ–π–ª—å:</strong> ${orderName}</p>
      <p><strong>–ö–ª–∏–µ–Ω—Ç:</strong> ${orderUser}</p>
      <p><strong>ID –∑–∞–∫–∞–∑–∞:</strong> ${orderId}</p>
    `;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ statusModal –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
  openModal(statusModal); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
async function changeOrderStatus(orderId, newStatus) {
  if (!orderId) return;

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const orderDoc = await db.collection('orders').doc(orderId).get();
    const orderData = orderDoc.data();
    const orderName = orderData?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–∫–∞–∑';
    const userName = orderData?.user || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç';

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Firebase
    await db.collection('orders').doc(orderId).update({
      status: newStatus,
      updatedAt: firebase.firestore.FieldValue.serverTimestamp ? firebase.firestore.FieldValue.serverTimestamp() : new Date()
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    const telegramResult = await sendStatusUpdateToTelegram(orderId, newStatus, orderName, userName);
    if (telegramResult.success) {
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
    } else {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram:', telegramResult.error);
    }

    // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Telegram
    const webhookResult = await updateOrderStatusViaWebhook(orderId, newStatus);
    if (webhookResult.success) {
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Telegram —á–µ—Ä–µ–∑ webhook');
    } else {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Telegram:', webhookResult.error);
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ç–∞—Ç—É—Å–∞
    closeModal(statusModal); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ
    if (adminPanel && adminPanel.style.display === 'block') {
      await loadAdminOrders();
    }
    
    showSuccess('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞');
  }
}

// === –ö–û–ù–ï–¶ –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô ===

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
function getStatusText(status) {
  switch(status) {
    case 'confirmed': return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω';
    case 'preparing': return '–ì–æ—Ç–æ–≤–∏—Ç—Å—è';
    case 'ready': return '–ì–æ—Ç–æ–≤';
    case 'completed': return '–í—ã–ø–æ–ª–Ω–µ–Ω';
    case 'cancelled': return '–û—Ç–º–µ–Ω—ë–Ω';
    default: return '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ';
  }
}

// === –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–¢–ö–†–´–¢–ò–Ø –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù ===

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –≤—Ö–æ–¥–∞
loginBtn?.addEventListener('click', () => {
  openModal(authModal);
});

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
registerBtn?.addEventListener('click', () => {
  openModal(registerModal);
});

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
ordersBtn?.addEventListener('click', async () => {
  if (auth.currentUser) {
    await loadOrderHistory(auth.currentUser.uid);
    openModal(ordersModal);
  }
});

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
adminBtn?.addEventListener('click', async () => {
  if (isAdmin) {
    await loadCocktails();
    await loadAdminOrders(); // –¢–µ–ø–µ—Ä—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await loadStoplist();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    const statusData = await monitorSystem();
    displaySystemStatus(statusData);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Telegram
    displayTelegramInfo();
    
    openModal(adminPanel);
  }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è (–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–≤–µ—Ä—Ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏)
addCocktailBtn?.addEventListener('click', () => {
  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã (–∫–∞–∫ —É –≤–∞—Å –±—ã–ª–æ)
  const formTitle = document.getElementById('formTitle');
  const cocktailId = document.getElementById('cocktailId');
  const cocktailName = document.getElementById('cocktailName');
  const cocktailIngredients = document.getElementById('cocktailIngredients');
  const cocktailMood = document.getElementById('cocktailMood');
  const cocktailAlcohol = document.getElementById('cocktailAlcohol');
  const previewImage = document.getElementById('previewImage');

  if (formTitle) formTitle.innerHTML = '<i class="fas fa-cocktail"></i> –î–æ–±–∞–≤–∏—Ç—å –∫–æ–∫—Ç–µ–π–ª—å';
  if (cocktailId) cocktailId.value = '';
  if (cocktailName) cocktailName.value = '';
  if (cocktailIngredients) cocktailIngredients.value = '';
  if (cocktailMood) cocktailMood.value = '';
  if (cocktailAlcohol) cocktailAlcohol.value = '';
  if (previewImage) {
    previewImage.style.display = 'none';
    previewImage.src = '';
  }
  // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ñ–æ—Ä–º—ã –∫–æ–∫—Ç–µ–π–ª—è
  openModal(cocktailFormModal); 
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
tabBtns.forEach(btn => {
  btn.addEventListener('click', () => {
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    tabBtns.forEach(b => b.classList.remove('active'));
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–µ
    btn.classList.add('active');
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    tabContents.forEach(content => content.classList.remove('active'));
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    const tabId = btn.getAttribute('data-tab');
    const tabElement = document.getElementById(`${tabId}-tab`);
    if (tabElement) {
        tabElement.classList.add('active');
    }
  });
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
toggleForm?.addEventListener('click', (e) => {
  if (e.target.id === 'switchToRegister') {
    closeModal(authModal); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
    openModal(registerModal); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    e.preventDefault();
  }
});

// === –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ó–ê–ö–†–´–¢–ò–Ø –ú–û–î–ê–õ–¨–ù–´–• –û–ö–û–ù ===

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è (X)
closeBtns.forEach(btn => {
  btn?.addEventListener('click', (e) => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å, –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –∫–Ω–æ–ø–∫–∏
    const modalContent = e.target.closest('.modal-content');
    if (modalContent) {
      const modal = modalContent.parentElement;
      closeModal(modal);
    }
  });
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
window.addEventListener('click', (e) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–ª–∏–∫–Ω—É–ª–∏ –ª–∏ –º—ã –≤–Ω–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  if (e.target.classList.contains('modal')) {
    closeModal(e.target);
  }
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–Ω–æ–ø–∫–∞–º
closeNotification?.addEventListener('click', () => {
  closeModal(notificationModal);
  if (champagneAnimation) champagneAnimation.innerHTML = '';
});

closeSuccess?.addEventListener('click', () => {
  closeModal(successModal);
});

closeError?.addEventListener('click', () => {
  closeModal(errorModal);
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
document.getElementById('closeOrderModal')?.addEventListener('click', () => {
  // –û—á–∏—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
  const placeholder = document.querySelector('.order-image-placeholder');
  if (placeholder) {
    placeholder.style.display = 'none';
  }
  closeModal(orderModal);
});

// === –û–°–¢–ê–õ–¨–ù–û–ô –ö–û–î (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫—Ä–æ–º–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è openModal/closeModal –≥–¥–µ –Ω—É–∂–Ω–æ) ===

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
authForm?.addEventListener('submit', async (e) => {
  e.preventDefault();
  const phoneInput = document.getElementById('phone');
  const passwordInput = document.getElementById('password');

  if (!phoneInput || !passwordInput) {
    showError('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—è –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    return;
  }

  const phone = phoneInput.value;
  const password = passwordInput.value;

  const loader = document.getElementById('loader');
  if (loader) loader.classList.add('active');

  try {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º email –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
    const email = `${phone.replace(/\D/g, '')}@asafievbar.com`;
    const userCredential = await auth.signInWithEmailAndPassword(email, password);
    await userCredential.user.reload();
    const updatedUser = auth.currentUser;
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ (300ms)
    await new Promise(resolve => setTimeout(resolve, 300));
    
    if (userName) {
        userName.textContent = updatedUser.displayName || "–ì–æ—Å—Ç—å";
        userName.style.display = 'block';
    }
    closeModal(authModal); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    document.querySelectorAll('.cocktail-card').forEach(card => {
      card.classList.add('fade-in-content');
    });
    
  } catch (error) {
    showError('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + error.message);
  } finally {
    if (loader) loader.classList.remove('active');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
registerForm?.addEventListener('submit', async (e) => {
  e.preventDefault();
  const displayNameInput = document.getElementById('displayName');
  const regPhoneInput = document.getElementById('regPhone');
  const regPasswordInput = document.getElementById('regPassword');

  if (!displayNameInput || !regPhoneInput || !regPasswordInput) {
    showError('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—è –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    return;
  }

  const displayName = displayNameInput.value;
  const phone = regPhoneInput.value;
  const password = regPasswordInput.value;

  const loader = document.getElementById('loader');
  if (loader) loader.classList.add('active');

  try {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º email –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
    const email = `${phone.replace(/\D/g, '')}@asafievbar.com`;
    const userCredential = await auth.createUserWithEmailAndPassword(email, password);
    await userCredential.user.updateProfile({ displayName });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
    await db.collection('users').doc(userCredential.user.uid).set({
      displayName: displayName,
      phone: phone,
      role: 'user', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      createdAt: new Date()
    });
    
    await new Promise(resolve => setTimeout(resolve, 300));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É—Å–ø–µ—Ö–∞
    closeModal(registerModal); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    openModal(successModal); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    
    document.querySelectorAll('.cocktail-card').forEach(card => {
      card.classList.add('fade-in-content');
    });
    
  } catch (error) {
    showError('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + error.message);
  } finally {
    if (loader) loader.classList.remove('active');
  }
});

// –í—ã—Ö–æ–¥
logoutBtn?.addEventListener('click', async () => {
  await auth.signOut();
});

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è
function editCocktail(id) {
  const cocktail = cocktailsData.find(c => c.id === id);
  if (cocktail) {
    const formTitle = document.getElementById('formTitle');
    const cocktailId = document.getElementById('cocktailId');
    const cocktailName = document.getElementById('cocktailName');
    const cocktailIngredients = document.getElementById('cocktailIngredients');
    const cocktailMood = document.getElementById('cocktailMood');
    const cocktailAlcohol = document.getElementById('cocktailAlcohol');
    const previewImage = document.getElementById('previewImage');

    if (formTitle) formTitle.innerHTML = '<i class="fas fa-edit"></i> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–∫—Ç–µ–π–ª—å';
    if (cocktailId) cocktailId.value = cocktail.id;
    if (cocktailName) cocktailName.value = cocktail.name;
    if (cocktailIngredients) cocktailIngredients.value = cocktail.ingredients || '';
    if (cocktailMood) cocktailMood.value = cocktail.mood || '';
    if (cocktailAlcohol) cocktailAlcohol.value = cocktail.alcohol || '';

    if (cocktail.image) {
      if (previewImage) {
        previewImage.src = cocktail.image;
        previewImage.style.display = 'block';
      }
    } else {
      if (previewImage) {
        previewImage.style.display = 'none';
      }
    }
    
    openModal(cocktailFormModal); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è
async function deleteCocktail(id) {
  if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–∫—Ç–µ–π–ª—å?')) {
    try {
      await db.collection('cocktails').doc(id).delete();
      await loadCocktails();
      showSuccess('–ö–æ–∫—Ç–µ–π–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–∫—Ç–µ–π–ª—è:', error);
      showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–∫—Ç–µ–π–ª—è');
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∫–æ–∫—Ç–µ–π–ª—è
cocktailForm?.addEventListener('submit', async (e) => {
  e.preventDefault();
  
  const cocktailId = document.getElementById('cocktailId');
  const cocktailName = document.getElementById('cocktailName');
  const cocktailIngredients = document.getElementById('cocktailIngredients');
  const cocktailMood = document.getElementById('cocktailMood');
  const cocktailAlcohol = document.getElementById('cocktailAlcohol');
  const cocktailImage = document.getElementById('cocktailImage');

  if (!cocktailName || !cocktailIngredients) {
    showError('‚ùå –û—à–∏–±–∫–∞: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    return;
  }

  const id = cocktailId ? cocktailId.value : '';
  const name = cocktailName.value;
  const ingredients = cocktailIngredients.value;
  const mood = cocktailMood ? cocktailMood.value : '';
  const alcohol = cocktailAlcohol ? cocktailAlcohol.value : '';
  const imageFile = cocktailImage ? cocktailImage.files[0] : null;
  
  try {
    let imageUrl = '';
    
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
    if (imageFile) {
      const storageRef = storage.ref();
      const imageRef = storageRef.child(`cocktails/${Date.now()}_${imageFile.name}`);
      const snapshot = await imageRef.put(imageFile);
      imageUrl = await snapshot.ref.getDownloadURL();
    }
    
    const cocktailData = {
      name: name,
      ingredients: ingredients,
      mood: mood,
      alcohol: alcohol ? parseInt(alcohol) : null,
      updatedAt: new Date()
    };
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if (imageUrl) {
      cocktailData.image = imageUrl;
    } else if (!id) {
      // –ï—Å–ª–∏ –Ω–æ–≤—ã–π –∫–æ–∫—Ç–µ–π–ª—å –∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É
      cocktailData.image = 'https://i.pinimg.com/736x/5d/5d/5d/5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d.jpg';
    }
    
    if (id) {
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–∫—Ç–µ–π–ª—è
      await db.collection('cocktails').doc(id).update(cocktailData);
    } else {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–∫—Ç–µ–π–ª—è
      cocktailData.createdAt = new Date();
      await db.collection('cocktails').add(cocktailData);
    }
    
    closeModal(cocktailFormModal); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await loadCocktails();
    showSuccess(id ? '–ö–æ–∫—Ç–µ–π–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω' : '–ö–æ–∫—Ç–µ–π–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–∫—Ç–µ–π–ª—è:', error);
    showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–∫—Ç–µ–π–ª—è');
  }
});

// –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
const cocktailImageInput = document.getElementById('cocktailImage');
if (cocktailImageInput) {
    cocktailImageInput.addEventListener('change', function(e) {
    const file = e.target.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
        const preview = document.getElementById('previewImage');
        if (preview) {
            preview.src = e.target.result;
            preview.style.display = 'block';
        }
        };
        reader.readAsDataURL(file);
    }
    });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç
addToStoplist?.addEventListener('click', async () => {
  if (!stoplistCocktails || !stopReason) {
    showError('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—è –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    return;
  }

  const cocktailName = stoplistCocktails.value;
  const reason = stopReason.value;
  
  if (!cocktailName || !reason) {
    showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
    return;
  }
  
  try {
    await db.collection('stoplist').add({
      cocktailName: cocktailName,
      reason: reason,
      timestamp: new Date().toLocaleString('ru-RU')
    });
    
    stopReason.value = '';
    await loadStoplist();
    showSuccess('–ö–æ–∫—Ç–µ–π–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç:', error);
    showError('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç');
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞
async function removeFromStoplist(id) {
  try {
    await db.collection('stoplist').doc(id).delete();
    await loadStoplist();
    showSuccess('–ö–æ–∫—Ç–µ–π–ª—å —É–¥–∞–ª—ë–Ω –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞:', error);
    showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
statusButtons.forEach(btn => {
  btn.addEventListener('click', () => {
    const status = btn.getAttribute('data-status');
    changeOrderStatus(currentOrderId, status);
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
checkSystemBtn?.addEventListener('click', async () => {
  const statusData = await monitorSystem();
  displaySystemStatus(statusData);
});

testWebhookBtn?.addEventListener('click', testWebhookServer);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
setupWebhookBtn?.addEventListener('click', setupTelegramWebhook);
deleteWebhookBtn?.addEventListener('click', deleteTelegramWebhook);
getWebhookInfoBtn?.addEventListener('click', getTelegramWebhookInfo);
sendTestMessageBtn?.addEventListener('click', sendTestMessage);

// –ó–∞–∫–∞–∑ (–∫–Ω–æ–ø–∫–∞)
document.addEventListener('click', (e) => {
  const btn = e.target.closest('.order-btn');
  if (btn && !btn.disabled && !btn.classList.contains('loading')) {
    const user = auth.currentUser;
    if (!user) {
      showError('üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –∑–∞–∫–∞–∑–∞.');
      return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    btn.classList.add('loading');
    btn.disabled = true;
    const originalText = btn.innerHTML;
    btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –ó–∞–≥—Ä—É–∂–∞–µ–º...';
    
    const name = btn.getAttribute('data-name');
    // üëá –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–∫—Ç–µ–π–ª—è –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    const card = btn.closest('.cocktail-card');
    const imgElement = card?.querySelector('img');
    const imgSrc = imgElement ? imgElement.src : '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
    const hasRealImage = imgSrc && !imgSrc.includes('5d5d5d') && !imgSrc.includes('placeholder');
    
    currentOrder = { 
      name, 
      user: user.displayName || "–ì–æ—Å—Ç—å", 
      userId: user.uid,
      displayTime: new Date().toLocaleString('ru-RU'),
      image: hasRealImage ? imgSrc : '',
      status: 'pending' // –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    };
    if (orderSummary) {
        orderSummary.innerHTML = `
        <strong>üç∏ –ö–æ–∫—Ç–µ–π–ª—å:</strong> ${name}<br>
        <strong>üì¨ –í–∞—à–µ –∏–º—è:</strong> ${currentOrder.user}
        `;
    }
    // üëá –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–≥–ª—É—à–∫—É
    const orderImagePreview = document.getElementById('orderImagePreview');
    if (orderImagePreview) {
        if (hasRealImage && imgSrc) {
            orderImagePreview.src = imgSrc;
            orderImagePreview.style.display = 'block';
            orderImagePreview.alt = name;
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –∫–æ–∫—Ç–µ–π–ª–µ–π –±–µ–∑ —Ñ–æ—Ç–æ
            orderImagePreview.style.display = 'none';
            // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            let placeholder = document.querySelector('.order-image-placeholder');
            if (!placeholder) {
                placeholder = document.createElement('div');
                placeholder.className = 'order-image-placeholder';
                placeholder.innerHTML = `
                    <i class="fas fa-camera"></i>
                    <p>–ö–æ–∫—Ç–µ–π–ª—å —É–∂–µ –¥–µ–ª–∞–µ—Ç —Å–µ–ª—Ñ–∏,<br>—Å–∫–æ—Ä–æ –≤—ã–ª–æ–∂–∏—Ç —Å—é–¥–∞</p>
                `;
                orderImagePreview.parentNode.appendChild(placeholder);
            }
            placeholder.style.display = 'block';
        }
    }
    openModal(orderModal); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    btn.classList.remove('loading');
    btn.disabled = false;
    btn.innerHTML = originalText;
  }
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
confirmOrderBtn?.addEventListener('click', async () => {
  if (!currentOrder) return;
  
  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–ª–∏–∫–∏
  if (confirmOrderBtn.disabled || confirmOrderBtn.classList.contains('loading')) {
    return;
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  confirmOrderBtn.classList.add('loading');
  confirmOrderBtn.disabled = true;
  const originalText = confirmOrderBtn.innerHTML;
  confirmOrderBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑...';

  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ Firestore —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –≤—Ä–µ–º–µ–Ω–∏
    const now = new Date();
    const orderData = {
      ...currentOrder,
      displayTime: now.toLocaleString('ru-RU'),
      createdAt: firebase.firestore.FieldValue.serverTimestamp ? firebase.firestore.FieldValue.serverTimestamp() : now
    };
    const docRef = await db.collection('orders').add(orderData);

    const message = `
üÜï *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ Asafiev Bar!*
üç∏ *–ö–æ–∫—Ç–µ–π–ª—å:* ${currentOrder.name}
üë§ *–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:* ${currentOrder.user}
üïí *–í—Ä–µ–º—è:* ${currentOrder.displayTime}
üÜî *ID –∑–∞–∫–∞–∑–∞:* ${docRef.id}
        `.trim();

    // –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
    const inlineKeyboard = {
      inline_keyboard: [
        [
          { text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: `confirmed_${docRef.id}` },
          { text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data: `cancelled_${docRef.id}` }
        ],
        [
          { text: "üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è", callback_data: `preparing_${docRef.id}` },
          { text: "üç∏ –ì–æ—Ç–æ–≤", callback_data: `ready_${docRef.id}` }
        ],
        [
          { text: "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω", callback_data: `completed_${docRef.id}` }
        ]
      ]
    };

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω –ª–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª –≤ URL Telegram API
    const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    const response = await fetch(telegramUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'Markdown',
        reply_markup: inlineKeyboard
      })
    });
    
    if (!response.ok) {
      throw new Error(`Telegram API error: ${response.status}`);
    }

    // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫–∞–∑–µ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
    if (navigator.vibrate) {
      navigator.vibrate([200, 100, 200]);
    } else if ('ontouchstart' in window || navigator.maxTouchPoints > 0) {
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      try {
        if (window.Telegram && window.Telegram.WebApp) {
          window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');
        }
      } catch (e) {
        console.log('Haptic feedback not available');
      }
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è —à–∞–º–ø–∞–Ω—Å–∫–æ–≥–æ
    createChampagneAnimation();

    // –û—á–∏—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫–∞–∑–µ
    const placeholder = document.querySelector('.order-image-placeholder');
    if (placeholder) {
      placeholder.style.display = 'none';
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    closeModal(orderModal); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    openModal(notificationModal); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    currentOrder = null;
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞:", error);
    showError('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑.');
  } finally {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    confirmOrderBtn.classList.remove('loading');
    confirmOrderBtn.disabled = false;
    confirmOrderBtn.innerHTML = originalText;
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —à–∞–º–ø–∞–Ω—Å–∫–æ–≥–æ
function createChampagneAnimation() {
  if (!champagneAnimation) return;
  champagneAnimation.innerHTML = '';
  for (let i = 0; i < 50; i++) {
    const bubble = document.createElement('div');
    bubble.className = 'champagne-bubble';
    bubble.style.left = Math.random() * 100 + '%';
    bubble.style.animationDelay = Math.random() * 2 + 's';
    bubble.style.width = (Math.random() * 10 + 5) + 'px';
    bubble.style.height = bubble.style.width;
    champagneAnimation.appendChild(bubble);
  }
  
  // –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    if (champagneAnimation) champagneAnimation.innerHTML = '';
  }, 3000);
}

// –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
function showError(message) {
  if (errorMessage) errorMessage.textContent = message;
  openModal(errorModal); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
}

// –ü–æ–∫–∞–∑ —É—Å–ø–µ—Ö–∞
function showSuccess(message) {
  const successContent = document.querySelector('.success-content p');
  if (successContent) successContent.textContent = message;
  openModal(successModal); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
}

// === –§–£–ù–ö–¶–ò–ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê WEBHOOK –°–ï–†–í–ï–†–ê ===

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞
async function checkWebhookServerStatus() {
  try {
    const response = await fetch(`${WEBHOOK_SERVER_URL}/health`);
    const data = await response.json();
    
    if (data.status === 'OK') {
      console.log('‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç:', data);
      return { status: 'online', data };
    } else {
      console.warn('‚ö†Ô∏è Webhook —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ OK:', data);
      return { status: 'warning', data };
    }
  } catch (error) {
    console.error('‚ùå Webhook —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
    return { status: 'offline', error: error.message };
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ Firebase —á–µ—Ä–µ–∑ webhook —Å–µ—Ä–≤–µ—Ä
async function checkWebhookFirebase() {
  try {
    const response = await fetch(`${WEBHOOK_SERVER_URL}/test-firebase`);
    const data = await response.json();
    
    if (data.success) {
      console.log('‚úÖ Firebase —á–µ—Ä–µ–∑ webhook —Ä–∞–±–æ—Ç–∞–µ—Ç:', data);
      return { status: 'online', data };
    } else {
      console.warn('‚ö†Ô∏è Firebase —á–µ—Ä–µ–∑ webhook –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', data);
      return { status: 'error', data };
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Firebase —á–µ—Ä–µ–∑ webhook:', error);
    return { status: 'offline', error: error.message };
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook –≤ Telegram
async function checkTelegramWebhook() {
  try {
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getWebhookInfo`);
    const data = await response.json();
    
    if (data.ok && data.result.url) {
      console.log('‚úÖ Telegram webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', data.result.url);
      return { status: 'online', data: data.result };
    } else {
      console.warn('‚ö†Ô∏è Telegram webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', data);
      return { status: 'error', data };
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram webhook:', error);
    return { status: 'offline', error: error.message };
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ webhook —Å–µ—Ä–≤–µ—Ä
async function updateOrderStatusViaWebhook(orderId, newStatus) {
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π callback –¥–ª—è webhook —Å–µ—Ä–≤–µ—Ä–∞
    const callbackData = `${newStatus}_${orderId}`;
    
    const response = await fetch(`${WEBHOOK_SERVER_URL}/telegram-webhook`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        callback_query: {
          id: `test_${Date.now()}`,
          data: callbackData,
          message: {
            message_id: 1
          },
          from: {
            username: 'admin',
            first_name: 'Admin'
          }
        }
      })
    });
    
    if (response.ok) {
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ webhook:', orderId, newStatus);
      return { success: true };
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ webhook:', response.status);
      return { success: false, error: `HTTP ${response.status}` };
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ webhook —Å–µ—Ä–≤–µ—Ä:', error);
    return { success: false, error: error.message };
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ Telegram
async function sendStatusUpdateToTelegram(orderId, newStatus, orderName, userName) {
  try {
    const statusEmojis = {
      'confirmed': '‚úÖ',
      'preparing': 'üë®‚Äçüç≥',
      'ready': 'üç∏',
      'completed': 'üéâ',
      'cancelled': '‚ùå'
    };
    
    const statusTexts = {
      'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      'preparing': '–ì–æ—Ç–æ–≤–∏—Ç—Å—è',
      'ready': '–ì–æ—Ç–æ–≤',
      'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω',
      'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    };
    
    const emoji = statusEmojis[newStatus] || 'üìù';
    const statusText = statusTexts[newStatus] || newStatus;
    
    const message = `
${emoji} *–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω*

üç∏ *–ö–æ–∫—Ç–µ–π–ª—å:* ${orderName}
üë§ *–ö–ª–∏–µ–Ω—Ç:* ${userName}
üìä *–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:* ${statusText}
üïí *–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU')}
üÜî *ID –∑–∞–∫–∞–∑–∞:* ${orderId}
    `.trim();
    
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'Markdown'
      })
    });
    
    if (response.ok) {
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
      return { success: true };
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', response.status);
      return { success: false, error: `HTTP ${response.status}` };
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', error);
    return { success: false, error: error.message };
  }
}

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
async function monitorSystem() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...');
  
  const [serverStatus, firebaseStatus, webhookStatus] = await Promise.all([
    checkWebhookServerStatus(),
    checkWebhookFirebase(),
    checkTelegramWebhook()
  ]);
  
  // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:', {
    server: serverStatus.status,
    firebase: firebaseStatus.status,
    webhook: webhookStatus.status
  });
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  if (serverStatus.status === 'offline' || firebaseStatus.status === 'offline' || webhookStatus.status === 'offline') {
    console.warn('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π');
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  }
  
  return { serverStatus, firebaseStatus, webhookStatus };
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function displaySystemStatus(statusData) {
  if (!systemStatus) return;
  
  const { serverStatus, firebaseStatus, webhookStatus } = statusData;
  
  systemStatus.innerHTML = `
    <div class="status-item ${serverStatus.status}">
      <div class="status-header">
        <div class="status-title">üåê Webhook –°–µ—Ä–≤–µ—Ä</div>
        <div class="status-indicator ${serverStatus.status}">${getMonitoringStatusText(serverStatus.status)}</div>
      </div>
      <div class="status-details">
        ${serverStatus.status === 'online' ? 
          `‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç<br>URL: ${WEBHOOK_SERVER_URL}` : 
          `‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω<br>–û—à–∏–±–∫–∞: ${serverStatus.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
        }
      </div>
    </div>
    
    <div class="status-item ${firebaseStatus.status}">
      <div class="status-header">
        <div class="status-title">üî• Firebase (—á–µ—Ä–µ–∑ webhook)</div>
        <div class="status-indicator ${firebaseStatus.status}">${getMonitoringStatusText(firebaseStatus.status)}</div>
      </div>
      <div class="status-details">
        ${firebaseStatus.status === 'online' ? 
          `‚úÖ Firebase –ø–æ–¥–∫–ª—é—á–µ–Ω<br>–ü—Ä–æ–µ–∫—Ç: ${firebaseStatus.data?.projectId || 'bar-menu-6145c'}` : 
          `‚ùå Firebase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω<br>–û—à–∏–±–∫–∞: ${firebaseStatus.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
        }
      </div>
    </div>
    
    <div class="status-item ${webhookStatus.status}">
      <div class="status-header">
        <div class="status-title">üì± Telegram Webhook</div>
        <div class="status-indicator ${webhookStatus.status}">${getMonitoringStatusText(webhookStatus.status)}</div>
      </div>
      <div class="status-details">
        ${webhookStatus.status === 'online' ? 
          `‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω<br>URL: ${webhookStatus.data?.url || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}` : 
          `‚ùå Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω<br>–û—à–∏–±–∫–∞: ${webhookStatus.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
        }
      </div>
    </div>
  `;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
function getMonitoringStatusText(status) {
  switch(status) {
    case 'online': return '–û–Ω–ª–∞–π–Ω';
    case 'warning': return '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ';
    case 'error': return '–û—à–∏–±–∫–∞';
    case 'offline': return '–û—Ñ–ª–∞–π–Ω';
    default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}

// –¢–µ—Å—Ç webhook —Å–µ—Ä–≤–µ—Ä–∞
async function testWebhookServer() {
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º callback_query –Ω–∞–ø—Ä—è–º—É—é
    const testCallback = {
      callback_query: {
        id: `test_${Date.now()}`,
        from: {
          id: 123456789,
          is_bot: false,
          first_name: 'Test Admin',
          username: 'testadmin'
        },
        message: {
          message_id: 1,
          from: {
            id: 123456789,
            is_bot: true,
            first_name: 'Asafiev Bar Bot',
            username: 'asafiev_bar_bot'
          },
          chat: {
            id: parseInt(TELEGRAM_CHAT_ID),
            type: 'private'
          },
          date: Math.floor(Date.now() / 1000),
          text: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
        },
        data: 'confirmed_test_order_123'
      }
    };
    
    const response = await fetch(`${WEBHOOK_SERVER_URL}/telegram-webhook`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testCallback)
    });
    
    const result = await response.text();
    console.log('üì§ –û—Ç–≤–µ—Ç webhook —Å–µ—Ä–≤–µ—Ä–∞:', response.status, result);
    
    if (response.ok) {
      showSuccess('‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.');
    } else {
      showError(`‚ùå –û—à–∏–±–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} - ${result}`);
    }
  } catch (error) {
    showError(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook: ${error.message}`);
  }
}

// === –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø TELEGRAM ===

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Telegram
async function setupTelegramWebhook() {
  try {
    const webhookUrl = `${WEBHOOK_SERVER_URL}/telegram-webhook`;
    
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/setWebhook`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        url: webhookUrl,
        allowed_updates: ['message', 'callback_query']
      })
    });
    
    const data = await response.json();
    
    if (data.ok) {
      showSuccess('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
      displayTelegramInfo();
    } else {
      showError(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: ${data.description}`);
    }
  } catch (error) {
    showError(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: ${error.message}`);
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ webhook
async function deleteTelegramWebhook() {
  try {
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/deleteWebhook`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        drop_pending_updates: true
      })
    });
    
    const data = await response.json();
    
    if (data.ok) {
      showSuccess('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
      displayTelegramInfo();
    } else {
      showError(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: ${data.description}`);
    }
  } catch (error) {
    showError(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: ${error.message}`);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook
async function getTelegramWebhookInfo() {
  try {
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getWebhookInfo`);
    const data = await response.json();
    
    if (data.ok) {
      displayTelegramInfo(data.result);
    } else {
      showError(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${data.description}`);
    }
  } catch (error) {
    showError(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${error.message}`);
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendTestMessage() {
  try {
    const message = `
üß™ *–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Asafiev Bar*

‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ Firebase –ø–æ–¥–∫–ª—é—á–µ–Ω
‚úÖ Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω

üïí –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
üåê –°–µ—Ä–≤–µ—Ä: ${WEBHOOK_SERVER_URL}
    `.trim();
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
    const testKeyboard = {
      inline_keyboard: [
        [
          { text: "üß™ –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∞ 1", callback_data: "test_button_1" },
          { text: "üß™ –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∞ 2", callback_data: "test_button_2" }
        ],
        [
          { text: "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data: "system_ok" }
        ]
      ]
    };
    
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'Markdown',
        reply_markup: testKeyboard
      })
    });
    
    const data = await response.json();
    
    if (data.ok) {
      showSuccess('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
    } else {
      showError(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${data.description}`);
    }
  } catch (error) {
    showError(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
  }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Telegram
function displayTelegramInfo(webhookInfo = null) {
  if (!telegramStatus) return;
  
  if (!webhookInfo) {
    telegramStatus.innerHTML = `
      <div class="telegram-info">
        <h5>üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Telegram –±–æ—Ç–µ</h5>
        <p><strong>–¢–æ–∫–µ–Ω –±–æ—Ç–∞:</strong> <code>${TELEGRAM_BOT_TOKEN.substring(0, 10)}...</code></p>
        <p><strong>Chat ID:</strong> <code>${TELEGRAM_CHAT_ID}</code></p>
        <p><strong>Webhook URL:</strong> <code>${WEBHOOK_SERVER_URL}/telegram-webhook</code></p>
        <p><em>–ù–∞–∂–º–∏—Ç–µ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Webhook" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</em></p>
      </div>
    `;
    return;
  }
  
  const hasWebhook = webhookInfo.url && webhookInfo.url.length > 0;
  const webhookStatus = hasWebhook ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
  const webhookUrl = hasWebhook ? webhookInfo.url : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
  
  telegramStatus.innerHTML = `
    <div class="telegram-info">
      <h5>üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Telegram –±–æ—Ç–µ</h5>
      <p><strong>–¢–æ–∫–µ–Ω –±–æ—Ç–∞:</strong> <code>${TELEGRAM_BOT_TOKEN.substring(0, 10)}...</code></p>
      <p><strong>Chat ID:</strong> <code>${TELEGRAM_CHAT_ID}</code></p>
      <p><strong>–°—Ç–∞—Ç—É—Å webhook:</strong> ${webhookStatus}</p>
      <p><strong>Webhook URL:</strong> <code>${webhookUrl}</code></p>
      ${hasWebhook ? `
        <p><strong>–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:</strong> ${webhookInfo.last_error_message || '–ù–µ—Ç –æ—à–∏–±–æ–∫'}</p>
        <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫:</strong> ${webhookInfo.pending_update_count || 0}</p>
        <p><strong>–ú–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:</strong> ${webhookInfo.max_connections || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
      ` : ''}
    </div>
  `;
}

// === –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ===

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
initThemeToggle();
initSwipe();

// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—É—Å—ã —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å –∫ –∫–∞—Ä—Ç–æ—á–∫–∞–º
(async () => {
  await loadStoplist();
  await loadCocktails();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  await monitorSystem();
  
  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  setInterval(monitorSystem, 5 * 60 * 1000);
})();