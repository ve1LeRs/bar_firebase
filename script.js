// üî• –¢–í–û–ò –ö–õ–Æ–ß–ò FIREBASE
const firebaseConfig = {
  apiKey: "AIzaSyB4bD8UAu0Aj5IRK5H-uZg6kxNAIbkZc9k",
  authDomain: "bar-menu-6145c.firebaseapp.com",
  projectId: "bar-menu-6145c",
  storageBucket: "bar-menu-6145c.firebasestorage.app",
  messagingSenderId: "493608422842",
  appId: "1:493608422842:web:3b4b6bd8a4cb681c436183"
};
// ü§ñ TELEGRAM
const TELEGRAM_BOT_TOKEN = "8326139522:AAG2fwHYd1vRPx0cUXt4ATaFYTNxmzInWJo";
const TELEGRAM_CHAT_ID = "1743362083";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const app = firebase.initializeApp(firebaseConfig);
const auth = firebase.auth();
const db = firebase.firestore();
const storage = firebase.storage();

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const themeToggle = document.getElementById('themeToggle');
const loginBtn = document.getElementById('loginBtn');
const registerBtn = document.getElementById('registerBtn');
const logoutBtn = document.getElementById('logoutBtn');
const ordersBtn = document.getElementById('ordersBtn');
const adminBtn = document.getElementById('adminBtn');
const userName = document.getElementById('userName');
const authModal = document.getElementById('authModal');
const registerModal = document.getElementById('registerModal');
const successModal = document.getElementById('successModal');
const errorModal = document.getElementById('errorModal');
const ordersModal = document.getElementById('ordersModal');
const notificationModal = document.getElementById('notificationModal');
const adminPanel = document.getElementById('adminPanel');
const cocktailFormModal = document.getElementById('cocktailFormModal');
const statusModal = document.getElementById('statusModal');
const modalTitle = document.getElementById('modalTitle');
const authForm = document.getElementById('authForm');
const registerForm = document.getElementById('registerForm');
const toggleForm = document.getElementById('toggleForm');
const switchToRegister = document.getElementById('switchToRegister');
const closeBtns = document.querySelectorAll('.close');
const orderButtons = document.querySelectorAll('.order-btn');
const orderModal = document.getElementById('orderModal');
const orderSummary = document.getElementById('orderSummary');
const confirmOrderBtn = document.getElementById('confirmOrder');
const ordersList = document.getElementById('ordersList');
const closeNotification = document.getElementById('closeNotification');
const closeSuccess = document.getElementById('closeSuccess');
const closeError = document.getElementById('closeError');
const champagneAnimation = document.getElementById('champagneAnimation');
const cocktailsGrid = document.querySelector('.cocktails-grid');
const errorMessage = document.getElementById('errorMessage');
const addCocktailBtn = document.getElementById('addCocktailBtn');
const cocktailForm = document.getElementById('cocktailForm');
const cocktailsList = document.getElementById('cocktailsList');
const adminOrdersList = document.getElementById('adminOrdersList');
const stoplistCocktails = document.getElementById('stoplistCocktails');
const addToStoplist = document.getElementById('addToStoplist');
const currentStoplist = document.getElementById('currentStoplist');
const stopReason = document.getElementById('stopReason');
const tabBtns = document.querySelectorAll('.tab-btn');
const tabContents = document.querySelectorAll('.tab-content');
const statusButtons = document.querySelectorAll('.status-btn');
const statusOrderInfo = document.getElementById('statusOrderInfo');

let currentOrder = null;
let startX = 0;
let startY = 0;
let currentCard = null;
let currentOrderId = null;
let isAdmin = false;
let cocktailsData = [];
let stoplistData = [];

// –°–æ–∑–¥–∞–µ–º –º–µ—Ä—Ü–∞—é—â–∏–µ –æ–≥–æ–Ω—å–∫–∏
function createSparkles() {
  const sparklesContainer = document.querySelector('.sparkles');
  if (sparklesContainer) {
    sparklesContainer.innerHTML = '';
    for (let i = 1; i <= 30; i++) {
      const sparkle = document.createElement('div');
      sparkle.className = 'sparkle';
      sparkle.style.left = Math.random() * 100 + '%';
      sparkle.style.top = Math.random() * 100 + '%';
      sparkle.style.animationDelay = Math.random() * 4 + 's';
      sparkle.style.width = (Math.random() * 4 + 2) + 'px';
      sparkle.style.height = sparkle.style.width;
      sparkle.style.opacity = Math.random() * 0.8 + 0.2;
      sparklesContainer.appendChild(sparkle);
    }
  }
}

// –í—ã–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–≥–æ–Ω—å–∫–æ–≤
createSparkles();

// –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã
function initThemeToggle() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
  const savedTheme = localStorage.getItem('theme');
  if (savedTheme === 'dark') {
    document.body.classList.add('dark-theme');
    themeToggle.innerHTML = '<i class="fas fa-sun"></i>';
  } else {
    themeToggle.innerHTML = '<i class="fas fa-moon"></i>';
  }

  themeToggle.addEventListener('click', () => {
    document.body.classList.toggle('dark-theme');
    if (document.body.classList.contains('dark-theme')) {
      localStorage.setItem('theme', 'dark');
      themeToggle.innerHTML = '<i class="fas fa-sun"></i>';
    } else {
      localStorage.setItem('theme', 'light');
      themeToggle.innerHTML = '<i class="fas fa-moon"></i>';
    }
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ–≥–æ–Ω—å–∫–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–µ–º—ã
    setTimeout(createSparkles, 100);
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–≤–∞–π–ø–∞
function initSwipe() {
  const cocktailCards = document.querySelectorAll('.cocktail-card');
  cocktailCards.forEach(card => {
    // Touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    card.addEventListener('touchstart', handleTouchStart, false);
    card.addEventListener('touchmove', handleTouchMove, false);
    card.addEventListener('touchend', handleTouchEnd, false);

    // Mouse —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
    card.addEventListener('mousedown', handleMouseDown, false);
    card.addEventListener('mousemove', handleMouseMove, false);
    card.addEventListener('mouseup', handleMouseUp, false);
    card.addEventListener('mouseleave', handleMouseLeave, false);
  });
}

function handleTouchStart(e) {
  const touch = e.touches[0];
  startX = touch.clientX;
  startY = touch.clientY;
  currentCard = e.currentTarget;
  currentCard.classList.add('swipe-active');
}

function handleTouchMove(e) {
  if (!startX || !currentCard) return;

  const touch = e.touches[0];
  const diffX = touch.clientX - startX;
  const diffY = touch.clientY - startY;

  // –¢–æ–ª—å–∫–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
  if (Math.abs(diffX) > Math.abs(diffY)) {
    e.preventDefault();
    currentCard.style.transform = `translateX(${diffX}px)`;
    currentCard.style.opacity = 1 - Math.abs(diffX) / 300;

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–∞–π–ø–∞
    if (diffX > 50) {
      currentCard.classList.add('swipe-right');
    } else {
      currentCard.classList.remove('swipe-right');
    }
  }
}

function handleTouchEnd(e) {
  if (!startX || !currentCard) return;

  const touch = e.changedTouches[0];
  const diffX = touch.clientX - startX;

  if (Math.abs(diffX) > 100) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è —Å–≤–∞–π–ø–∞
    if (diffX > 0) {
      // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –∑–∞–∫–∞–∑–∞—Ç—å
      const name = currentCard.getAttribute('data-name');
      triggerDirectOrder(name);
    }
  }

  // –°–±—Ä–æ—Å —Å—Ç–∏–ª–µ–π
  currentCard.style.transform = '';
  currentCard.style.opacity = '';
  currentCard.classList.remove('swipe-active', 'swipe-right');
  currentCard = null;
  startX = 0;
  startY = 0;
}

function handleMouseDown(e) {
  startX = e.clientX;
  startY = e.clientY;
  currentCard = e.currentTarget;
  currentCard.classList.add('swipe-active');
}

function handleMouseMove(e) {
  if (!startX || !currentCard) return;

  const diffX = e.clientX - startX;
  const diffY = e.clientY - startY;

  // –¢–æ–ª—å–∫–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
  if (Math.abs(diffX) > Math.abs(diffY)) {
    currentCard.style.transform = `translateX(${diffX}px)`;
    currentCard.style.opacity = 1 - Math.abs(diffX) / 300;

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–∞–π–ø–∞
    if (diffX > 50) {
      currentCard.classList.add('swipe-right');
    } else {
      currentCard.classList.remove('swipe-right');
    }
  }
}

function handleMouseUp(e) {
  if (!startX || !currentCard) return;

  const diffX = e.clientX - startX;

  if (Math.abs(diffX) > 100) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è —Å–≤–∞–π–ø–∞
    if (diffX > 0) {
      // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –∑–∞–∫–∞–∑–∞—Ç—å
      const name = currentCard.getAttribute('data-name');
      triggerDirectOrder(name);
    }
  }

  // –°–±—Ä–æ—Å —Å—Ç–∏–ª–µ–π
  currentCard.style.transform = '';
  currentCard.style.opacity = '';
  currentCard.classList.remove('swipe-active', 'swipe-right');
  currentCard = null;
  startX = 0;
  startY = 0;
}

function handleMouseLeave(e) {
  if (currentCard) {
    // –°–±—Ä–æ—Å —Å—Ç–∏–ª–µ–π
    currentCard.style.transform = '';
    currentCard.style.opacity = '';
    currentCard.classList.remove('swipe-active', 'swipe-right');
    currentCard = null;
    startX = 0;
    startY = 0;
  }
}

// –ü—Ä—è–º–æ–π –∑–∞–∫–∞–∑ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async function triggerDirectOrder(name) {
  const user = auth.currentUser;
  if (!user) {
    showError('üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –∑–∞–∫–∞–∑–∞.');
    return;
  }

  const card = document.querySelector(`.cocktail-card[data-name="${name}"]`);
  if (!card) return;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ –ª–∏ –∫–æ–∫—Ç–µ–π–ª—å
  const isInStoplist = stoplistData.some(item => item.cocktailName === name);
  if (isInStoplist) {
    showError(`‚ùå ${name} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: ${stoplistData.find(item => item.cocktailName === name).reason}`);
    return;
  }

  const imgSrc = card.querySelector('img').src;
  const order = {
    name,
    user: user.displayName || "–ì–æ—Å—Ç—å",
    userId: user.uid,
    timestamp: new Date().toLocaleString('ru-RU'),
    image: imgSrc,
    status: 'pending'
  };

  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ Firestore
    const docRef = await db.collection('orders').add(order);

    const message = `
üÜï *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ Asafiev Bar!*
üç∏ *–ö–æ–∫—Ç–µ–π–ª—å:* ${order.name}
üë§ *–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:* ${order.user}
üïí *–í—Ä–µ–º—è:* ${order.timestamp}
üÜî *ID –∑–∞–∫–∞–∑–∞:* ${docRef.id}
        `.trim();

    const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    await fetch(telegramUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'Markdown'
      })
    });

    // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫–∞–∑–µ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
    if (navigator.vibrate) {
      navigator.vibrate([200, 100, 200]);
    } else if ('ontouchstart' in window || navigator.maxTouchPoints > 0) {
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      try {
        if (window.Telegram && window.Telegram.WebApp) {
          window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');
        }
      } catch (e) {
        console.log('Haptic feedback not available');
      }
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è —à–∞–º–ø–∞–Ω—Å–∫–æ–≥–æ
    createChampagneAnimation();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    notificationModal.style.display = 'block';
    currentOrder = null;

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞:", error);
    showError('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑.');
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
auth.onAuthStateChanged(async user => {
  if (user) {
    loginBtn.style.display = 'none';
    registerBtn.style.display = 'none';
    ordersBtn.style.display = 'inline-block';
    logoutBtn.style.display = 'inline-block';
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const userDoc = await db.collection('users').doc(user.uid).get();
    if (userDoc.exists) {
      const userData = userDoc.data();
      isAdmin = userData.role === 'admin';
      if (isAdmin) {
        adminBtn.style.display = 'inline-block';
      }
    }
    // üëá –ï—Å–ª–∏ displayName –ø—É—Å—Ç ‚Äî –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    if (!user.displayName) {
      await user.reload();
    }
    userName.textContent = user.displayName || "–ì–æ—Å—Ç—å";
    userName.style.display = 'block';
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    await loadCocktails();
    await loadStoplist();
  } else {
    loginBtn.style.display = 'inline-block';
    registerBtn.style.display = 'inline-block';
    ordersBtn.style.display = 'none';
    adminBtn.style.display = 'none';
    logoutBtn.style.display = 'none';
    userName.textContent = '';
    userName.style.display = 'none';
    isAdmin = false;
  }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–∫—Ç–µ–π–ª–µ–π
async function loadCocktails() {
  try {
    const cocktailsSnapshot = await db.collection('cocktails').get();
    cocktailsData = [];
    cocktailsGrid.innerHTML = '';

    cocktailsSnapshot.forEach(doc => {
      const cocktail = { id: doc.id, ...doc.data() };
      cocktailsData.push(cocktail);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ –ª–∏ –∫–æ–∫—Ç–µ–π–ª—å
      const isInStoplist = stoplistData.some(item => item.cocktailName === cocktail.name);

      const cocktailCard = document.createElement('div');
      cocktailCard.className = `cocktail-card ${isInStoplist ? 'stopped' : ''}`;
      cocktailCard.setAttribute('data-name', cocktail.name);
      cocktailCard.setAttribute('data-alcohol', cocktail.alcohol || 0);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const imageUrl = cocktail.image || 'https://i.pinimg.com/736x/5d/5d/5d/5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d.jpg';
      const hasImage = imageUrl && !imageUrl.includes('5d5d5d');
      const displayImage = hasImage ? imageUrl : '';

      cocktailCard.innerHTML = `
        <div class="image-container">
          ${displayImage ?
            `<img src="${displayImage}" alt="${cocktail.name}">` :
            `<div class="no-image-placeholder">
              <i class="fas fa-camera"></i>
              <p>–ö–æ–∫—Ç–µ–π–ª—å —É–∂–µ –¥–µ–ª–∞–µ—Ç —Å–µ–ª—Ñ–∏,<br>—Å–∫–æ—Ä–æ –≤—ã–ª–æ–∂–∏—Ç —Å—é–¥–∞</p>
            </div>`
          }
          ${cocktail.alcohol ? `
            <div class="alcohol-indicator">
              <i class="fas fa-wine-bottle"></i>
              <span class="alcohol-percent">${cocktail.alcohol}%</span>
            </div>
          ` : ''}
          ${isInStoplist ? `
            <div class="stoplist-badge">
              <i class="fas fa-ban"></i> –í —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ
            </div>
          ` : ''}
          ${isAdmin ? `
            <div class="admin-actions">
              <button class="edit-btn" data-id="${cocktail.id}"><i class="fas fa-edit"></i></button>
              <button class="delete-btn" data-id="${cocktail.id}"><i class="fas fa-trash"></i></button>
            </div>
          ` : ''}
        </div>
        <div class="card-content">
          <h2>${cocktail.name}</h2>
          <p class="ingredients">${cocktail.ingredients}</p>
          <p class="mood">${cocktail.mood || ''}</p>
          ${!isInStoplist ? `
            <button class="order-btn" data-name="${cocktail.name}">
              <i class="fas fa-glass-martini-alt"></i> –ó–∞–∫–∞–∑–∞—Ç—å
            </button>
          ` : `
            <button class="order-btn disabled" disabled>
              <i class="fas fa-ban"></i> –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            </button>
          `}
        </div>
      `;

      cocktailsGrid.appendChild(cocktailCard);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
    if (isAdmin) {
      document.querySelectorAll('.edit-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.stopPropagation();
          const id = btn.getAttribute('data-id');
          editCocktail(id);
        });
      });

      document.querySelectorAll('.delete-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.stopPropagation();
          const id = btn.getAttribute('data-id');
          deleteCocktail(id);
        });
      });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–∞–π–ø –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    initSwipe();

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–∫—Ç–µ–π–ª–µ–π:', error);
    showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–∫—Ç–µ–π–ª–µ–π');
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞
async function loadStoplist() {
  try {
    const stoplistSnapshot = await db.collection('stoplist').get();
    stoplistData = [];
    currentStoplist.innerHTML = '';

    stoplistSnapshot.forEach(doc => {
      const item = { id: doc.id, ...doc.data() };
      stoplistData.push(item);

      const stoplistItem = document.createElement('div');
      stoplistItem.className = 'stoplist-item';
      stoplistItem.innerHTML = `
        <div class="stoplist-info">
          <strong>${item.cocktailName}</strong>
          <span>${item.reason}</span>
          <small>${item.timestamp}</small>
        </div>
        ${isAdmin ? `
          <button class="remove-from-stoplist" data-id="${item.id}">
            <i class="fas fa-times"></i>
          </button>
        ` : ''}
      `;

      currentStoplist.appendChild(stoplistItem);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞
    if (isAdmin) {
      document.querySelectorAll('.remove-from-stoplist').forEach(btn => {
        btn.addEventListener('click', () => {
          const id = btn.getAttribute('data-id');
          removeFromStoplist(id);
        });
      });
    }

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–∫—Ç–µ–π–ª–∏, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã
    await loadCocktails();

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞:', error);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
async function loadOrderHistory(userId) {
  // –î–æ–±–∞–≤–∏–º —è–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const currentUser = auth.currentUser;
  if (!currentUser || currentUser.uid !== userId) {
    console.warn('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–∞', { currentUserUid: currentUser?.uid, requestedUserId: userId });
    ordersList.innerHTML = '<p class="error">–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>';
    return;
  }

  try {
    console.log(`–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è userId: ${userId}`);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º query —Å where –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω
    // const q = query(collection(db, "orders"), where("userId", "==", userId), orderBy("timestamp", "desc"));
    // const ordersSnapshot = await getDocs(q);

    // –ò–õ–ò –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ, –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å–∞ –Ω–µ—Ç
    const ordersSnapshot = await db.collection('orders').orderBy('timestamp', 'desc').get();
    // const ordersSnapshot = await db.collection('orders').get(); // –ï—Å–ª–∏ orderBy —Ç–æ–∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É

    ordersList.innerHTML = '';

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    const userOrders = [];
    ordersSnapshot.forEach(doc => {
      const orderData = doc.data();
      // console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞ ID ${doc.id}:`, orderData); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (orderData.userId === userId) {
        userOrders.push({ id: doc.id, ...orderData });
      }
    });

    if (userOrders.length === 0) {
      ordersList.innerHTML = '<p class="no-orders">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤</p>';
      return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    userOrders.sort((a, b) => {
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ timestamp - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞. –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç Date –∏–ª–∏ Timestamp, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç –¥—Ä—É–≥–æ–π.
        const dateA = a.timestamp instanceof Date ? a.timestamp : new Date(a.timestamp);
        const dateB = b.timestamp instanceof Date ? b.timestamp : new Date(b.timestamp);
        // –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
        return dateB - dateA; // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    });

    userOrders.forEach(order => {
      const orderElement = document.createElement('div');
      orderElement.className = 'order-item';
      // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ getStatusText –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
      const statusText = typeof getStatusText === 'function' ? getStatusText(order.status) : (order.status || '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ');
      orderElement.innerHTML = `
        <div class="order-header">
          <span class="order-name">${order.name}</span>
          <span class="order-status ${order.status || 'pending'}">${statusText}</span>
        </div>
        <div class="order-time">${order.timestamp}</div>
      `;
      ordersList.appendChild(orderElement);
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
    // –ë–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (error.code === 'permission-denied') {
        showError('‚ùå –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫–∞–∑–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.');
    } else if (error.code === 'failed-precondition') {
         showError('‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å.');
    } else {
        showError('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤: ' + error.message);
    }
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async function loadAdminOrders() {
  try {
    const ordersSnapshot = await db.collection('orders')
      .orderBy('timestamp', 'desc')
      .get();

    adminOrdersList.innerHTML = '';

    if (ordersSnapshot.empty) {
      adminOrdersList.innerHTML = '<p class="no-orders">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤</p>';
      return;
    }

    ordersSnapshot.forEach(doc => {
      const order = { id: doc.id, ...doc.data() };

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
      if (order.status !== 'completed' && order.status !== 'cancelled') {
        const orderElement = document.createElement('div');
        orderElement.className = 'admin-order-item';
        orderElement.innerHTML = `
          <div class="admin-order-header">
            <div>
              <strong>${order.name}</strong>
              <div>${order.user}</div>
              <small>${order.timestamp}</small>
            </div>
            <div class="admin-order-status ${order.status || 'pending'}">
              ${getStatusText(order.status)}
            </div>
          </div>
          <div class="admin-order-actions">
            <button class="change-status-btn" data-id="${order.id}">
              <i class="fas fa-sync-alt"></i> –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å
            </button>
          </div>
        `;

        adminOrdersList.appendChild(orderElement);
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    document.querySelectorAll('.change-status-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        const id = btn.getAttribute('data-id');
        openStatusModal(id);
      });
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
    showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤');
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
function getStatusText(status) {
  switch(status) {
    case 'confirmed': return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω';
    case 'preparing': return '–ì–æ—Ç–æ–≤–∏—Ç—Å—è';
    case 'ready': return '–ì–æ—Ç–æ–≤';
    case 'completed': return '–í—ã–ø–æ–ª–Ω–µ–Ω';
    case 'cancelled': return '–û—Ç–º–µ–Ω—ë–Ω';
    default: return '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ';
  }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
function openStatusModal(orderId) {
  currentOrderId = orderId;

  // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –ø–æ ID
  const orderElement = document.querySelector(`.change-status-btn[data-id="${orderId}"]`)
    .closest('.admin-order-item');
  const orderName = orderElement.querySelector('strong').textContent;
  const orderUser = orderElement.querySelector('div div').textContent;

  statusOrderInfo.innerHTML = `
    <p><strong>–ö–æ–∫—Ç–µ–π–ª—å:</strong> ${orderName}</p>
    <p><strong>–ö–ª–∏–µ–Ω—Ç:</strong> ${orderUser}</p>
  `;

  statusModal.style.display = 'block';
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
async function changeOrderStatus(orderId, newStatus) {
  try {
    await db.collection('orders').doc(orderId).update({
      status: newStatus
    });

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    statusModal.style.display = 'none';

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã
    await loadAdminOrders();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    const orderDoc = await db.collection('orders').doc(orderId).get();
    const order = orderDoc.data();

    let statusMessage = '';
    switch(newStatus) {
      case 'confirmed':
        statusMessage = '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω';
        break;
      case 'preparing':
        statusMessage = '–≥–æ—Ç–æ–≤–∏—Ç—Å—è';
        break;
      case 'ready':
        statusMessage = '–≥–æ—Ç–æ–≤';
        break;
      case 'completed':
        statusMessage = '–≤—ã–ø–æ–ª–Ω–µ–Ω';
        break;
      case 'cancelled':
        statusMessage = '–æ—Ç–º–µ–Ω—ë–Ω';
        break;
    }

    const message = `
üîÑ *–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω—ë–Ω!*
üç∏ *–ö–æ–∫—Ç–µ–π–ª—å:* ${order.name}
üë§ *–ö–ª–∏–µ–Ω—Ç:* ${order.user}
üìä *–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:* ${statusMessage}
    `.trim();

    const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    await fetch(telegramUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'Markdown'
      })
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    showError('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
  }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –≤—Ö–æ–¥–∞
loginBtn?.addEventListener('click', () => {
  authModal.style.display = 'block';
});

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
registerBtn?.addEventListener('click', () => {
  registerModal.style.display = 'block';
});

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
ordersBtn?.addEventListener('click', async () => {
  if (auth.currentUser) {
    await loadOrderHistory(auth.currentUser.uid);
    ordersModal.style.display = 'block';
  }
});

// –û—Ç–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
adminBtn?.addEventListener('click', async () => {
  if (isAdmin) {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    await loadCocktails();
    await loadAdminOrders();
    await loadStoplist();
    adminPanel.style.display = 'block';
  }
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
tabBtns.forEach(btn => {
  btn.addEventListener('click', () => {
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    tabBtns.forEach(b => b.classList.remove('active'));
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–µ
    btn.classList.add('active');

    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    tabContents.forEach(content => content.classList.remove('active'));
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    const tabId = btn.getAttribute('data-tab');
    document.getElementById(`${tabId}-tab`).classList.add('active');
  });
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
toggleForm?.addEventListener('click', (e) => {
  if (e.target.id === 'switchToRegister') {
    authModal.style.display = 'none';
    registerModal.style.display = 'block';
    e.preventDefault();
  }
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–∫
closeBtns.forEach(btn => {
  btn?.addEventListener('click', () => {
    authModal.style.display = 'none';
    registerModal.style.display = 'none';
    orderModal.style.display = 'none';
    ordersModal.style.display = 'none';
    notificationModal.style.display = 'none';
    successModal.style.display = 'none';
    errorModal.style.display = 'none';
    adminPanel.style.display = 'none';
    cocktailFormModal.style.display = 'none';
    statusModal.style.display = 'none';
  });
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
closeNotification?.addEventListener('click', () => {
  notificationModal.style.display = 'none';
  champagneAnimation.innerHTML = '';
});

closeSuccess?.addEventListener('click', () => {
  successModal.style.display = 'none';
});

closeError?.addEventListener('click', () => {
  errorModal.style.display = 'none';
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
authForm?.addEventListener('submit', async (e) => {
  e.preventDefault();
  const phone = document.getElementById('phone').value;
  const password = document.getElementById('password').value;

  const loader = document.getElementById('loader');
  loader.classList.add('active');

  try {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º email –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
    const email = `${phone.replace(/\D/g, '')}@asafievbar.com`;
    const userCredential = await auth.signInWithEmailAndPassword(email, password);
    await userCredential.user.reload();
    const updatedUser = auth.currentUser;

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ (300ms)
    await new Promise(resolve => setTimeout(resolve, 300));

    userName.textContent = updatedUser.displayName || "–ì–æ—Å—Ç—å";
    authModal.style.display = 'none';

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    document.querySelectorAll('.cocktail-card').forEach(card => {
      card.classList.add('fade-in-content');
    });

  } catch (error) {
    showError('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + error.message);
  } finally {
    loader.classList.remove('active');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
registerForm?.addEventListener('submit', async (e) => {
  e.preventDefault();
  const displayName = document.getElementById('displayName').value;
  const phone = document.getElementById('regPhone').value;
  const password = document.getElementById('regPassword').value;

  const loader = document.getElementById('loader');
  loader.classList.add('active');

  try {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º email –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
    const email = `${phone.replace(/\D/g, '')}@asafievbar.com`;
    const userCredential = await auth.createUserWithEmailAndPassword(email, password);
    await userCredential.user.updateProfile({ displayName });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
    await db.collection('users').doc(userCredential.user.uid).set({
      displayName: displayName,
      phone: phone,
      role: 'user', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      createdAt: new Date()
    });

    await new Promise(resolve => setTimeout(resolve, 300));

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É—Å–ø–µ—Ö–∞
    registerModal.style.display = 'none';
    successModal.style.display = 'block';

    document.querySelectorAll('.cocktail-card').forEach(card => {
      card.classList.add('fade-in-content');
    });

  } catch (error) {
    showError('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + error.message);
  } finally {
    loader.classList.remove('active');
  }
});

// –í—ã—Ö–æ–¥
logoutBtn?.addEventListener('click', async () => {
  await auth.signOut();
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è
addCocktailBtn?.addEventListener('click', () => {
  document.getElementById('formTitle').innerHTML = '<i class="fas fa-cocktail"></i> –î–æ–±–∞–≤–∏—Ç—å –∫–æ–∫—Ç–µ–π–ª—å';
  document.getElementById('cocktailId').value = '';
  document.getElementById('cocktailName').value = '';
  document.getElementById('cocktailIngredients').value = '';
  document.getElementById('cocktailMood').value = '';
  document.getElementById('cocktailAlcohol').value = '';
  document.getElementById('previewImage').style.display = 'none';
  document.getElementById('previewImage').src = '';
  cocktailFormModal.style.display = 'block';
});

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è
function editCocktail(id) {
  const cocktail = cocktailsData.find(c => c.id === id);
  if (cocktail) {
    document.getElementById('formTitle').innerHTML = '<i class="fas fa-edit"></i> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–∫—Ç–µ–π–ª—å';
    document.getElementById('cocktailId').value = cocktail.id;
    document.getElementById('cocktailName').value = cocktail.name;
    document.getElementById('cocktailIngredients').value = cocktail.ingredients;
    document.getElementById('cocktailMood').value = cocktail.mood || '';
    document.getElementById('cocktailAlcohol').value = cocktail.alcohol || '';

    if (cocktail.image) {
      document.getElementById('previewImage').src = cocktail.image;
      document.getElementById('previewImage').style.display = 'block';
    } else {
      document.getElementById('previewImage').style.display = 'none';
    }

    cocktailFormModal.style.display = 'block';
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è
async function deleteCocktail(id) {
  if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–∫—Ç–µ–π–ª—å?')) {
    try {
      await db.collection('cocktails').doc(id).delete();
      await loadCocktails();
      showSuccess('–ö–æ–∫—Ç–µ–π–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–∫—Ç–µ–π–ª—è:', error);
      showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–∫—Ç–µ–π–ª—è');
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∫–æ–∫—Ç–µ–π–ª—è
cocktailForm?.addEventListener('submit', async (e) => {
  e.preventDefault();

  const id = document.getElementById('cocktailId').value;
  const name = document.getElementById('cocktailName').value;
  const ingredients = document.getElementById('cocktailIngredients').value;
  const mood = document.getElementById('cocktailMood').value;
  const alcohol = document.getElementById('cocktailAlcohol').value;
  const imageFile = document.getElementById('cocktailImage').files[0];

  try {
    let imageUrl = '';

    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
    if (imageFile) {
      const storageRef = storage.ref();
      const imageRef = storageRef.child(`cocktails/${Date.now()}_${imageFile.name}`);
      const snapshot = await imageRef.put(imageFile);
      imageUrl = await snapshot.ref.getDownloadURL();
    }

    const cocktailData = {
      name: name,
      ingredients: ingredients,
      mood: mood,
      alcohol: alcohol ? parseInt(alcohol) : null,
      updatedAt: new Date()
    };

    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if (imageUrl) {
      cocktailData.image = imageUrl;
    } else if (!id) {
      // –ï—Å–ª–∏ –Ω–æ–≤—ã–π –∫–æ–∫—Ç–µ–π–ª—å –∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É
      cocktailData.image = 'https://i.pinimg.com/736x/5d/5d/5d/5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d.jpg';
    }

    if (id) {
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–∫—Ç–µ–π–ª—è
      await db.collection('cocktails').doc(id).update(cocktailData);
    } else {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–∫—Ç–µ–π–ª—è
      cocktailData.createdAt = new Date();
      await db.collection('cocktails').add(cocktailData);
    }

    cocktailFormModal.style.display = 'none';
    await loadCocktails();
    showSuccess(id ? '–ö–æ–∫—Ç–µ–π–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω' : '–ö–æ–∫—Ç–µ–π–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–∫—Ç–µ–π–ª—è:', error);
    showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–∫—Ç–µ–π–ª—è');
  }
});

// –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
document.getElementById('cocktailImage')?.addEventListener('change', function(e) {
  const file = e.target.files[0];
  if (file) {
    const reader = new FileReader();
    reader.onload = function(e) {
      const preview = document.getElementById('previewImage');
      preview.src = e.target.result;
      preview.style.display = 'block';
    };
    reader.readAsDataURL(file);
  }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç
addToStoplist?.addEventListener('click', async () => {
  const cocktailName = stoplistCocktails.value;
  const reason = stopReason.value;

  if (!cocktailName || !reason) {
    showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
    return;
  }

  try {
    await db.collection('stoplist').add({
      cocktailName: cocktailName,
      reason: reason,
      timestamp: new Date().toLocaleString('ru-RU')
    });

    stopReason.value = '';
    await loadStoplist();
    showSuccess('–ö–æ–∫—Ç–µ–π–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç:', error);
    showError('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç');
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞
async function removeFromStoplist(id) {
  try {
    await db.collection('stoplist').doc(id).delete();
    await loadStoplist();
    showSuccess('–ö–æ–∫—Ç–µ–π–ª—å —É–¥–∞–ª—ë–Ω –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞:', error);
    showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
statusButtons.forEach(btn => {
  btn.addEventListener('click', () => {
    const status = btn.getAttribute('data-status');
    changeOrderStatus(currentOrderId, status);
  });
});

// –ó–∞–∫–∞–∑ (–∫–Ω–æ–ø–∫–∞)
document.addEventListener('click', (e) => {
  if (e.target.classList.contains('order-btn') && !e.target.disabled) {
    const user = auth.currentUser;
    if (!user) {
      showError('üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –∑–∞–∫–∞–∑–∞.');
      return;
    }
    const name = e.target.getAttribute('data-name');
    // üëá –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–∫—Ç–µ–π–ª—è –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    const imgSrc = e.target.closest('.cocktail-card').querySelector('img').src;
    currentOrder = {
      name,
      user: user.displayName || "–ì–æ—Å—Ç—å",
      userId: user.uid,
      timestamp: new Date().toLocaleString('ru-RU'),
      image: imgSrc,
      status: 'pending' // –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    };
    orderSummary.innerHTML = `
      <strong>üç∏ –ö–æ–∫—Ç–µ–π–ª—å:</strong> ${name}<br>
      <strong>üì¨ –í–∞—à–µ –∏–º—è:</strong> ${currentOrder.user}
    `;
    // üëá –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const orderImagePreview = document.getElementById('orderImagePreview');
    orderImagePreview.src = imgSrc;
    orderImagePreview.style.display = 'block';
    orderModal.style.display = 'block';
  }
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
confirmOrderBtn?.addEventListener('click', async () => {
  if (!currentOrder) return;

  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ Firestore
    const docRef = await db.collection('orders').add(currentOrder);

    const message = `
üÜï *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ Asafiev Bar!*
üç∏ *–ö–æ–∫—Ç–µ–π–ª—å:* ${currentOrder.name}
üë§ *–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:* ${currentOrder.user}
üïí *–í—Ä–µ–º—è:* ${currentOrder.timestamp}
    `.trim();

    const telegramUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    await fetch(telegramUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'Markdown'
      })
    });

    // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫–∞–∑–µ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
    if (navigator.vibrate) {
      navigator.vibrate([200, 100, 200]);
    } else if ('ontouchstart' in window || navigator.maxTouchPoints > 0) {
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–∏–±—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      try {
        if (window.Telegram && window.Telegram.WebApp) {
          window.Telegram.WebApp.HapticFeedback.impactOccurred('medium');
        }
      } catch (e) {
        console.log('Haptic feedback not available');
      }
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è —à–∞–º–ø–∞–Ω—Å–∫–æ–≥–æ
    createChampagneAnimation();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    orderModal.style.display = 'none';
    notificationModal.style.display = 'block';
    currentOrder = null;

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞:", error);
    showError('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑.');
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —à–∞–º–ø–∞–Ω—Å–∫–æ–≥–æ
function createChampagneAnimation() {
  champagneAnimation.innerHTML = '';
  for (let i = 0; i < 50; i++) {
    const bubble = document.createElement('div');
    bubble.className = 'champagne-bubble';
    bubble.style.left = Math.random() * 100 + '%';
    bubble.style.animationDelay = Math.random() * 2 + 's';
    bubble.style.width = (Math.random() * 10 + 5) + 'px';
    bubble.style.height = bubble.style.width;
    champagneAnimation.appendChild(bubble);
  }

  // –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    champagneAnimation.innerHTML = '';
  }, 3000);
}

// –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
function showError(message) {
  errorMessage.textContent = message;
  errorModal.style.display = 'block';
}

// –ü–æ–∫–∞–∑ —É—Å–ø–µ—Ö–∞
function showSuccess(message) {
  document.querySelector('.success-content p').textContent = message;
  successModal.style.display = 'block';
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ
window.addEventListener('click', (e) => {
  if (e.target === authModal) authModal.style.display = 'none';
  if (e.target === registerModal) registerModal.style.display = 'none';
  if (e.target === orderModal) orderModal.style.display = 'none';
  if (e.target === ordersModal) ordersModal.style.display = 'none';
  if (e.target === notificationModal) notificationModal.style.display = 'none';
  if (e.target === successModal) successModal.style.display = 'none';
  if (e.target === errorModal) errorModal.style.display = 'none';
  if (e.target === adminPanel) adminPanel.style.display = 'none';
  if (e.target === cocktailFormModal) cocktailFormModal.style.display = 'none';
  if (e.target === statusModal) statusModal.style.display = 'none';
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
initThemeToggle();
initSwipe();

// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
loadCocktails();
loadStoplist();