require('dotenv').config();
const admin = require('firebase-admin');

console.log('๐ฅ ะขะตััะธัะพะฒะฐะฝะธะต ะฝะพะฒะพะณะพ Firebase ะฟัะพะตะบัะฐ');
console.log('==========================================');

// ะัะพะฒะตััะตะผ, ะตััั ะปะธ ะฝะพะฒัะน service account key
let serviceAccount;
try {
  serviceAccount = require('./service-private-key.json');
  console.log('โ Service account key ะทะฐะณััะถะตะฝ');
  console.log('๐ ะะตัะฐะปะธ ะฟัะพะตะบัะฐ:');
  console.log('   Project ID:', serviceAccount.project_id);
  console.log('   Client Email:', serviceAccount.client_email);
  console.log('   Private Key ID:', serviceAccount.private_key_id);
} catch (error) {
  console.error('โ ะะต ัะดะฐะปะพัั ะทะฐะณััะทะธัั service-private-key.json:', error.message);
  console.log('๐ก ะฃะฑะตะดะธัะตัั, ััะพ ัะฐะนะป ัััะตััะฒัะตั ะธ ัะพะดะตัะถะธั ะฒะฐะปะธะดะฝัะน JSON');
  process.exit(1);
}

// ะะฝะธัะธะฐะปะธะทะธััะตะผ Firebase
try {
  if (!admin.apps.length) {
    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
      projectId: serviceAccount.project_id
    });
    console.log('โ Firebase Admin SDK ะธะฝะธัะธะฐะปะธะทะธัะพะฒะฐะฝ');
    console.log('๐ง Project ID:', serviceAccount.project_id);
  }
} catch (error) {
  console.error('โ ะัะธะฑะบะฐ ะธะฝะธัะธะฐะปะธะทะฐัะธะธ Firebase:', error);
  process.exit(1);
}

const db = admin.firestore();

// ะขะตััะธััะตะผ ะฟะพะดะบะปััะตะฝะธะต
async function testNewFirebaseConnection() {
  try {
    console.log('\n๐ ะขะตััะธััะตะผ ะฟะพะดะบะปััะตะฝะธะต ะบ ะฝะพะฒะพะผั Firestore...');
    
    // ะกะพะทะดะฐะตะผ ัะตััะพะฒัั ะบะพะปะปะตะบัะธั
    const testCollection = 'new_project_test';
    const testDoc = await db.collection(testCollection).doc('connection_test').get();
    
    console.log('โ ะะพะดะบะปััะตะฝะธะต ะบ Firestore ััะฟะตัะฝะพ');
    console.log('๐ Test document exists:', testDoc.exists);
    
    // ะขะตััะธััะตะผ ะทะฐะฟะธัั
    console.log('โ๏ธ ะขะตััะธััะตะผ ะทะฐะฟะธัั ะฒ ะฝะพะฒัั ะบะพะปะปะตะบัะธั...');
    await db.collection(testCollection).doc('connection_test').set({
      timestamp: admin.firestore.FieldValue.serverTimestamp(),
      message: 'New Firebase project connection successful',
      projectId: serviceAccount.project_id,
      testId: Date.now()
    });
    
    console.log('โ ะะฐะฟะธัั ะฒ Firestore ััะฟะตัะฝะฐ');
    
    // ะขะตััะธััะตะผ ััะตะฝะธะต
    console.log('๐ ะขะตััะธััะตะผ ััะตะฝะธะต ะธะท Firestore...');
    const testDoc2 = await db.collection(testCollection).doc('connection_test').get();
    const data = testDoc2.data();
    console.log('๐ ะัะพัะธัะฐะฝะฝัะต ะดะฐะฝะฝัะต:', {
      message: data.message,
      projectId: data.projectId,
      testId: data.testId,
      timestamp: data.timestamp
    });
    
    // ะขะตััะธััะตะผ ัะพะทะดะฐะฝะธะต ะบะพะปะปะตะบัะธะธ orders (ะดะปั ะฒะฐัะตะณะพ ะฟัะธะปะพะถะตะฝะธั)
    console.log('๐ธ ะขะตััะธััะตะผ ัะพะทะดะฐะฝะธะต ะบะพะปะปะตะบัะธะธ orders...');
    await db.collection('orders').doc('test_order').set({
      name: 'Test Cocktail',
      user: 'Test User',
      status: 'pending',
      timestamp: admin.firestore.FieldValue.serverTimestamp()
    });
    
    console.log('โ ะะพะปะปะตะบัะธั orders ัะพะทะดะฐะฝะฐ ััะฟะตัะฝะพ');
    
    console.log('\n๐ ะัะต ัะตััั ะฝะพะฒะพะณะพ Firebase ะฟัะพะตะบัะฐ ะฟัะพัะปะธ ััะฟะตัะฝะพ!');
    console.log('๐ ะะพัะพะฒะพ ะบ ะธัะฟะพะปัะทะพะฒะฐะฝะธั:');
    console.log('   - Project ID:', serviceAccount.project_id);
    console.log('   - Firestore Database: ะฐะบัะธะฒะฝะฐ');
    console.log('   - Collections: orders, new_project_test');
    
  } catch (error) {
    console.error('โ ะัะธะฑะบะฐ ัะตััะธัะพะฒะฐะฝะธั ะฝะพะฒะพะณะพ Firebase:', error);
    console.error('โ Error details:', {
      message: error.message,
      code: error.code,
      stack: error.stack
    });
  }
}

testNewFirebaseConnection().then(() => {
  console.log('\n๐ ะขะตัั ะฝะพะฒะพะณะพ Firebase ะฟัะพะตะบัะฐ ะทะฐะฒะตััะตะฝ');
  console.log('๐ก ะขะตะฟะตัั ะผะพะถะฝะพ ะพะฑะฝะพะฒะธัั Railway ะฟะตัะตะผะตะฝะฝัะต ะพะบััะถะตะฝะธั');
  process.exit(0);
}).catch(error => {
  console.error('๐ฅ ะัะธัะธัะตัะบะฐั ะพัะธะฑะบะฐ:', error);
  process.exit(1);
});
