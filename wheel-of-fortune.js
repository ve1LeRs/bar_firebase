// ========================================
// –ö–û–õ–ï–°–û –£–î–ê–ß–ò - –°–ò–°–¢–ï–ú–ê
// ========================================

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–ª–µ—Å–∞
let wheelState = {
  isSpinning: false,
  currentRotation: 0,
  prizes: [],
  userLastSpin: null,
  config: {
    active: true,
    cooldownHours: 24
  }
};

// –°—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
const wheelElements = {
  modal: null,
  canvas: null,
  ctx: null,
  spinButton: null,
  resultDiv: null,
  historyList: null,
  availabilityInfo: null,
  openBtn: null
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–µ—Å–∞ —É–¥–∞—á–∏
async function initWheelOfFortune() {
  console.log('üé∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–µ—Å–∞ —É–¥–∞—á–∏...');
  
  // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
  wheelElements.modal = document.getElementById('wheelOfFortuneModal');
  wheelElements.canvas = document.getElementById('wheelCanvas');
  wheelElements.spinButton = document.getElementById('spinButton');
  wheelElements.resultDiv = document.getElementById('wheelResult');
  wheelElements.historyList = document.getElementById('wheelHistoryList');
  wheelElements.availabilityInfo = document.getElementById('availabilityInfo');
  wheelElements.openBtn = document.getElementById('openWheelBtn');
  
  if (!wheelElements.canvas) {
    console.error('‚ùå Canvas –¥–ª—è –∫–æ–ª–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  wheelElements.ctx = wheelElements.canvas.getContext('2d');
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  await loadWheelConfig();
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–∑—ã
  await loadWheelPrizes();
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  setupWheelEventListeners();
  
  // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–µ—Å–æ
  drawWheel();
  
  console.log('‚úÖ –ö–æ–ª–µ—Å–æ —É–¥–∞—á–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–ª–µ—Å–∞
async function loadWheelConfig() {
  try {
    const configDoc = await db.collection('wheelConfig').doc('settings').get();
    
    if (configDoc.exists) {
      wheelState.config = {
        ...wheelState.config,
        ...configDoc.data()
      };
    } else {
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      await db.collection('wheelConfig').doc('settings').set({
        active: true,
        cooldownHours: 24,
        createdAt: firebase.firestore.FieldValue.serverTimestamp()
      });
    }
    
    console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–ª–µ—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', wheelState.config);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–∑–æ–≤
async function loadWheelPrizes() {
  try {
    const prizesSnapshot = await db.collection('wheelPrizes')
      .where('active', '==', true)
      .orderBy('probability', 'desc')
      .get();
    
    if (prizesSnapshot.empty) {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      wheelState.prizes = await createDefaultPrizes();
    } else {
      wheelState.prizes = prizesSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));
    }
    
    console.log('üéÅ –ü—Ä–∏–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', wheelState.prizes);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–∑–æ–≤:', error);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–∑—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    wheelState.prizes = getDefaultPrizes();
  }
}

// –ü—Ä–∏–∑—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
function getDefaultPrizes() {
  return [
    {
      id: 'bonus_50',
      name: '50 –±–æ–Ω—É—Å–æ–≤',
      description: '50 –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –Ω–∞ –≤–∞—à —Å—á–µ—Ç',
      type: 'bonus',
      value: 50,
      probability: 25,
      color: '#4caf50',
      icon: 'üíé'
    },
    {
      id: 'discount_10',
      name: '–°–∫–∏–¥–∫–∞ 10%',
      description: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É 10%',
      type: 'promo',
      value: 10,
      probability: 20,
      color: '#ff9800',
      icon: 'üé´'
    },
    {
      id: 'bonus_100',
      name: '100 –±–æ–Ω—É—Å–æ–≤',
      description: '100 –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –Ω–∞ –≤–∞—à —Å—á–µ—Ç',
      type: 'bonus',
      value: 100,
      probability: 15,
      color: '#2196f3',
      icon: 'üí∞'
    },
    {
      id: 'free_shot',
      name: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —à–æ—Ç',
      description: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —à–æ—Ç',
      type: 'promo',
      value: 100,
      promoType: 'freeShot',
      probability: 10,
      color: '#e91e63',
      icon: 'üç∏'
    },
    {
      id: 'discount_15',
      name: '–°–∫–∏–¥–∫–∞ 15%',
      description: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É 15%',
      type: 'promo',
      value: 15,
      probability: 10,
      color: '#9c27b0',
      icon: 'üéÅ'
    },
    {
      id: 'bonus_20',
      name: '20 –±–æ–Ω—É—Å–æ–≤',
      description: '20 –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –Ω–∞ –≤–∞—à —Å—á–µ—Ç',
      type: 'bonus',
      value: 20,
      probability: 15,
      color: '#00bcd4',
      icon: '‚ú®'
    },
    {
      id: 'nothing',
      name: '–ü–æ–≤–µ–∑–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑',
      description: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏–∑ –Ω–µ –≤—ã–ø–∞–ª',
      type: 'nothing',
      value: 0,
      probability: 5,
      color: '#9e9e9e',
      icon: 'üò¢'
    }
  ];
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ Firestore
async function createDefaultPrizes() {
  const defaultPrizes = getDefaultPrizes();
  const batch = db.batch();
  
  for (const prize of defaultPrizes) {
    const prizeRef = db.collection('wheelPrizes').doc(prize.id);
    batch.set(prizeRef, {
      ...prize,
      active: true,
      createdAt: firebase.firestore.FieldValue.serverTimestamp()
    });
  }
  
  await batch.commit();
  console.log('‚úÖ –ü—Ä–∏–∑—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω—ã');
  
  return defaultPrizes;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupWheelEventListeners() {
  // –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ–ª–µ—Å–∞
  if (wheelElements.openBtn) {
    wheelElements.openBtn.addEventListener('click', openWheelModal);
  }
  
  // –ö–Ω–æ–ø–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è
  if (wheelElements.spinButton) {
    wheelElements.spinButton.addEventListener('click', spinWheel);
  }
  
  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const closeBtn = wheelElements.modal?.querySelector('.close');
  if (closeBtn) {
    closeBtn.addEventListener('click', closeWheelModal);
  }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–æ–ª–µ—Å–∞
async function openWheelModal() {
  if (!auth.currentUser) {
    showError('–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –∫—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ');
    return;
  }
  
  wheelElements.modal.style.display = 'block';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
  await checkWheelAvailability();
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
  await loadWheelHistory();
  
  // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–µ—Å–æ
  drawWheel();
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeWheelModal() {
  wheelElements.modal.style.display = 'none';
  wheelElements.resultDiv.style.display = 'none';
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–ª–µ—Å–∞
async function checkWheelAvailability() {
  if (!auth.currentUser) return;
  
  try {
    const userId = auth.currentUser.uid;
    const userSpinDoc = await db.collection('wheelSpins').doc(userId).get();
    
    if (userSpinDoc.exists) {
      const data = userSpinDoc.data();
      wheelState.userLastSpin = data.lastSpinDate?.toDate();
      
      if (wheelState.userLastSpin) {
        const now = new Date();
        const timeDiff = now - wheelState.userLastSpin;
        const hoursDiff = timeDiff / (1000 * 60 * 60);
        
        if (hoursDiff < wheelState.config.cooldownHours) {
          // –ö–æ–ª–µ—Å–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
          const remainingTime = wheelState.config.cooldownHours - hoursDiff;
          const remainingHours = Math.floor(remainingTime);
          const remainingMinutes = Math.floor((remainingTime - remainingHours) * 60);
          
          wheelElements.spinButton.disabled = true;
          wheelElements.availabilityInfo.innerHTML = `
            <div class="availability-locked">
              üîí –ö–æ–ª–µ—Å–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑:
              <div class="availability-timer">${remainingHours}—á ${remainingMinutes}–º</div>
            </div>
          `;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –ø—Ä–æ—Ñ–∏–ª—è
          const wheelCardStatus = document.getElementById('wheelCardStatus');
          if (wheelCardStatus) {
            wheelCardStatus.textContent = `–î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ ${remainingHours}—á ${remainingMinutes}–º`;
          }
          
          return false;
        }
      }
    }
    
    // –ö–æ–ª–µ—Å–æ –¥–æ—Å—Ç—É–ø–Ω–æ
    wheelElements.spinButton.disabled = false;
    wheelElements.availabilityInfo.innerHTML = `
      <div class="availability-available">
        üéâ –ö–æ–ª–µ—Å–æ –≥–æ—Ç–æ–≤–æ –∫ –≤—Ä–∞—â–µ–Ω–∏—é!
        <p style="margin-top: 0.5rem; font-size: 0.9rem; font-weight: normal;">
          –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–æ–ª–µ—Å–∞
        </p>
      </div>
    `;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –ø—Ä–æ—Ñ–∏–ª—è
    const wheelCardStatus = document.getElementById('wheelCardStatus');
    if (wheelCardStatus) {
      wheelCardStatus.textContent = '–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–≥–æ–¥–Ω—è!';
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', error);
    return false;
  }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ–ª–µ—Å–∞
function drawWheel() {
  if (!wheelElements.ctx || wheelState.prizes.length === 0) return;
  
  const canvas = wheelElements.canvas;
  const ctx = wheelElements.ctx;
  const centerX = canvas.width / 2;
  const centerY = canvas.height / 2;
  const radius = Math.min(centerX, centerY) - 10;
  
  // –û—á–∏—â–∞–µ–º canvas
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  
  // –†–∏—Å—É–µ–º —Å–µ–∫—Ç–æ—Ä–∞
  const totalPrizes = wheelState.prizes.length;
  const anglePerPrize = (2 * Math.PI) / totalPrizes;
  
  wheelState.prizes.forEach((prize, index) => {
    const startAngle = index * anglePerPrize + wheelState.currentRotation;
    const endAngle = startAngle + anglePerPrize;
    
    // –†–∏—Å—É–µ–º —Å–µ–∫—Ç–æ—Ä
    ctx.beginPath();
    ctx.moveTo(centerX, centerY);
    ctx.arc(centerX, centerY, radius, startAngle, endAngle);
    ctx.closePath();
    
    // –ó–∞–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–æ–º
    ctx.fillStyle = prize.color || '#ff9800';
    ctx.fill();
    
    // –û–±–≤–æ–¥–∫–∞
    ctx.strokeStyle = '#fff';
    ctx.lineWidth = 3;
    ctx.stroke();
    
    // –¢–µ–∫—Å—Ç –ø—Ä–∏–∑–∞
    ctx.save();
    ctx.translate(centerX, centerY);
    ctx.rotate(startAngle + anglePerPrize / 2);
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    
    // –ò–∫–æ–Ω–∫–∞
    ctx.font = 'bold 30px Arial';
    ctx.fillStyle = '#fff';
    ctx.fillText(prize.icon || 'üéÅ', radius * 0.65, 0);
    
    // –ù–∞–∑–≤–∞–Ω–∏–µ
    ctx.font = 'bold 14px Arial';
    ctx.fillStyle = '#fff';
    ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';
    ctx.shadowBlur = 4;
    ctx.fillText(prize.name, radius * 0.4, 0);
    
    ctx.restore();
  });
  
  // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—Ä—É–≥
  ctx.beginPath();
  ctx.arc(centerX, centerY, 60, 0, 2 * Math.PI);
  ctx.fillStyle = '#fff';
  ctx.fill();
  ctx.strokeStyle = '#ff9800';
  ctx.lineWidth = 5;
  ctx.stroke();
}

// –í—Ä–∞—â–µ–Ω–∏–µ –∫–æ–ª–µ—Å–∞
async function spinWheel() {
  if (wheelState.isSpinning) return;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
  const isAvailable = await checkWheelAvailability();
  if (!isAvailable) {
    showError('–ö–æ–ª–µ—Å–æ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
    return;
  }
  
  wheelState.isSpinning = true;
  wheelElements.spinButton.disabled = true;
  wheelElements.resultDiv.style.display = 'none';
  
  // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑
  const selectedPrize = selectPrizeByProbability();
  console.log('üéØ –í—ã–±—Ä–∞–Ω –ø—Ä–∏–∑:', selectedPrize);
  
  // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–∏–∑–µ
  const prizeIndex = wheelState.prizes.findIndex(p => p.id === selectedPrize.id);
  const anglePerPrize = (2 * Math.PI) / wheelState.prizes.length;
  const targetAngle = (prizeIndex * anglePerPrize) + (anglePerPrize / 2);
  
  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤ + —Ü–µ–ª–µ–≤–æ–π —É–≥–æ–ª
  const fullRotations = 5 + Math.random() * 3; // 5-8 –æ–±–æ—Ä–æ—Ç–æ–≤
  const totalRotation = (fullRotations * 2 * Math.PI) + (2 * Math.PI - targetAngle);
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
  const duration = 4000; // 4 —Å–µ–∫—É–Ω–¥—ã
  const startTime = Date.now();
  const startRotation = wheelState.currentRotation;
  
  function animate() {
    const elapsed = Date.now() - startTime;
    const progress = Math.min(elapsed / duration, 1);
    
    // Ease-out —Ñ—É–Ω–∫—Ü–∏—è
    const easeOut = 1 - Math.pow(1 - progress, 3);
    
    wheelState.currentRotation = startRotation + (totalRotation * easeOut);
    drawWheel();
    
    if (progress < 1) {
      requestAnimationFrame(animate);
    } else {
      // –í—Ä–∞—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
      wheelState.isSpinning = false;
      onSpinComplete(selectedPrize);
    }
  }
  
  animate();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ø—ã—Ç–∫—É –≤ –±–∞–∑—É
  await saveSpinAttempt(selectedPrize);
}

// –í—ã–±–æ—Ä –ø—Ä–∏–∑–∞ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
function selectPrizeByProbability() {
  const totalProbability = wheelState.prizes.reduce((sum, prize) => sum + (prize.probability || 0), 0);
  const random = Math.random() * totalProbability;
  
  let cumulativeProbability = 0;
  for (const prize of wheelState.prizes) {
    cumulativeProbability += prize.probability || 0;
    if (random <= cumulativeProbability) {
      return prize;
    }
  }
  
  // –ù–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
  return wheelState.prizes[wheelState.prizes.length - 1];
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Ä–∞—â–µ–Ω–∏—è
async function onSpinComplete(prize) {
  console.log('üéä –í—Ä–∞—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–∏–∑:', prize);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  wheelElements.resultDiv.style.display = 'block';
  document.getElementById('resultIcon').textContent = prize.icon || 'üéÅ';
  document.getElementById('resultTitle').textContent = prize.name;
  document.getElementById('resultDescription').textContent = prize.description;
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞
  const claimBtn = document.getElementById('claimPrizeBtn');
  claimBtn.onclick = () => claimPrize(prize);
  
  // –≠—Ñ—Ñ–µ–∫—Ç—ã
  if (prize.type !== 'nothing') {
    playConfetti();
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
  await loadWheelHistory();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–∑–∞
async function claimPrize(prize) {
  if (!auth.currentUser) return;
  
  try {
    const userId = auth.currentUser.uid;
    
    if (prize.type === 'bonus') {
      // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã
      await db.collection('users').doc(userId).update({
        bonusPoints: firebase.firestore.FieldValue.increment(prize.value),
        totalEarned: firebase.firestore.FieldValue.increment(prize.value)
      });
      
      showSuccess(`üéâ ${prize.value} –±–æ–Ω—É—Å–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –≤–∞—à —Å—á–µ—Ç!`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤
      if (typeof loadUserBonuses === 'function') {
        await loadUserBonuses();
      }
      
    } else if (prize.type === 'promo') {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
      const promoCode = await createWheelPromoCode(prize);
      
      showSuccess(`üé´ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω: ${promoCode}\n–ü—Ä–∏–º–µ–Ω–∏—Ç–µ –µ–≥–æ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ!`);
      
    } else if (prize.type === 'nothing') {
      showInfo('üò¢ –í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–≤–µ–∑–ª–æ, –Ω–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–∑–∞
    await db.collection('wheelSpins').doc(userId).update({
      [`prizes.${wheelState.prizes.findIndex(p => p.id === prize.id)}.claimed`]: true,
      [`prizes.${wheelState.prizes.findIndex(p => p.id === prize.id)}.claimedAt`]: firebase.firestore.FieldValue.serverTimestamp()
    });
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    setTimeout(() => {
      closeWheelModal();
    }, 2000);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞:', error);
    showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞');
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏–∑ –∫–æ–ª–µ—Å–∞
async function createWheelPromoCode(prize) {
  const code = `WHEEL${Date.now().toString(36).toUpperCase()}`;
  
  const promoData = {
    code: code,
    discount: prize.value,
    description: prize.description,
    active: true,
    maxUses: 1,
    currentUses: 0,
    expiryDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 –¥–Ω–µ–π
    createdBy: 'wheel',
    createdAt: firebase.firestore.FieldValue.serverTimestamp()
  };
  
  if (prize.promoType === 'freeShot') {
    promoData.freeShot = true;
  }
  
  await db.collection('promocodes').doc(code).set(promoData);
  
  // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const userId = auth.currentUser.uid;
  await db.collection('userPromocodes').add({
    userId: userId,
    promoCode: code,
    source: 'wheel',
    createdAt: firebase.firestore.FieldValue.serverTimestamp()
  });
  
  return code;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ä–∞—â–µ–Ω–∏—è
async function saveSpinAttempt(prize) {
  if (!auth.currentUser) return;
  
  try {
    const userId = auth.currentUser.uid;
    const spinData = {
      userId: userId,
      prize: {
        id: prize.id,
        name: prize.name,
        type: prize.type,
        value: prize.value,
        claimed: false
      },
      lastSpinDate: firebase.firestore.FieldValue.serverTimestamp(),
      totalSpins: firebase.firestore.FieldValue.increment(1)
    };
    
    await db.collection('wheelSpins').doc(userId).set(spinData, { merge: true });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    await checkWheelAvailability();
    
    console.log('‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∏:', error);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤—Ä–∞—â–µ–Ω–∏–π
async function loadWheelHistory() {
  if (!auth.currentUser || !wheelElements.historyList) return;
  
  try {
    const userId = auth.currentUser.uid;
    const userSpinDoc = await db.collection('wheelSpins').doc(userId).get();
    
    if (!userSpinDoc.exists) {
      wheelElements.historyList.innerHTML = `
        <p style="text-align: center; color: #999; padding: 2rem;">
          –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –ö—Ä—É—Ç–∏—Ç–µ –∫–æ–ª–µ—Å–æ!
        </p>
      `;
      return;
    }
    
    const data = userSpinDoc.data();
    const prize = data.prize;
    
    if (!prize) {
      wheelElements.historyList.innerHTML = `
        <p style="text-align: center; color: #999; padding: 2rem;">
          –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –ö—Ä—É—Ç–∏—Ç–µ –∫–æ–ª–µ—Å–æ!
        </p>
      `;
      return;
    }
    
    const lastSpinDate = data.lastSpinDate?.toDate();
    const dateStr = lastSpinDate ? formatDate(lastSpinDate) : '–ù–µ–¥–∞–≤–Ω–æ';
    
    wheelElements.historyList.innerHTML = `
      <div class="wheel-history-item">
        <div class="history-item-icon">
          ${wheelState.prizes.find(p => p.id === prize.id)?.icon || 'üéÅ'}
        </div>
        <div class="history-item-info">
          <div class="history-item-prize">${prize.name}</div>
          <div class="history-item-date">${dateStr}</div>
        </div>
        <div class="history-item-status ${prize.claimed ? 'claimed' : 'pending'}">
          ${prize.claimed ? '–ü–æ–ª—É—á–µ–Ω' : '–û–∂–∏–¥–∞–µ—Ç'}
        </div>
      </div>
    `;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
  }
}

// –≠—Ñ—Ñ–µ–∫—Ç –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
function playConfetti() {
  const duration = 3000;
  const animationEnd = Date.now() + duration;
  const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 10000 };
  
  function randomInRange(min, max) {
    return Math.random() * (max - min) + min;
  }
  
  const interval = setInterval(function() {
    const timeLeft = animationEnd - Date.now();
    
    if (timeLeft <= 0) {
      return clearInterval(interval);
    }
    
    const particleCount = 50 * (timeLeft / duration);
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    for (let i = 0; i < particleCount; i++) {
      createConfettiParticle();
    }
  }, 250);
}

// –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü—ã –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
function createConfettiParticle() {
  const confetti = document.createElement('div');
  confetti.style.position = 'fixed';
  confetti.style.width = '10px';
  confetti.style.height = '10px';
  confetti.style.backgroundColor = ['#ff9800', '#4caf50', '#2196f3', '#e91e63', '#9c27b0'][Math.floor(Math.random() * 5)];
  confetti.style.left = Math.random() * window.innerWidth + 'px';
  confetti.style.top = '-20px';
  confetti.style.zIndex = '10000';
  confetti.style.borderRadius = '50%';
  confetti.style.pointerEvents = 'none';
  confetti.style.animation = 'confettiDrop 3s linear forwards';
  
  document.body.appendChild(confetti);
  
  setTimeout(() => {
    confetti.remove();
  }, 3000);
}

// ========================================
// –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ –î–õ–Ø –ö–û–õ–ï–°–ê –£–î–ê–ß–ò
// ========================================

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∫–æ–ª–µ—Å–∞
async function initWheelAdmin() {
  console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∫–æ–ª–µ—Å–∞...');
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const saveSettingsBtn = document.getElementById('saveWheelSettingsBtn');
  if (saveSettingsBtn) {
    saveSettingsBtn.addEventListener('click', saveWheelSettings);
  }
  
  const addPrizeBtn = document.getElementById('addWheelPrizeBtn');
  if (addPrizeBtn) {
    addPrizeBtn.addEventListener('click', showAddPrizeForm);
  }
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏
  const wheelTab = document.querySelector('[data-tab="wheel"]');
  if (wheelTab) {
    wheelTab.addEventListener('click', () => {
      loadWheelAdminData();
    });
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async function loadWheelAdminData() {
  await loadWheelAdminStats();
  await loadWheelAdminSettings();
  await loadWheelAdminPrizes();
  await loadWheelAdminHistory();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function loadWheelAdminStats() {
  try {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    // –í—Ä–∞—â–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
    const spinsToday = await db.collection('wheelSpins')
      .where('lastSpinDate', '>=', today)
      .get();
    
    document.getElementById('wheelSpinsToday').textContent = spinsToday.size;
    
    // –í—Å–µ–≥–æ –≤—Ä–∞—â–µ–Ω–∏–π
    const totalSpins = await db.collection('wheelSpins').get();
    document.getElementById('wheelTotalSpins').textContent = totalSpins.size;
    
    // –ü—Ä–∏–∑–æ–≤ –≤—ã–¥–∞–Ω–æ
    let prizesGiven = 0;
    totalSpins.forEach(doc => {
      const data = doc.data();
      if (data.prize && data.prize.claimed) {
        prizesGiven++;
      }
    });
    
    document.getElementById('wheelPrizesGiven').textContent = prizesGiven;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function loadWheelAdminSettings() {
  try {
    const configDoc = await db.collection('wheelConfig').doc('settings').get();
    
    if (configDoc.exists) {
      const data = configDoc.data();
      document.getElementById('wheelActive').checked = data.active !== false;
      document.getElementById('wheelCooldown').value = data.cooldownHours || 24;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function saveWheelSettings() {
  try {
    const active = document.getElementById('wheelActive').checked;
    const cooldownHours = parseInt(document.getElementById('wheelCooldown').value) || 24;
    
    await db.collection('wheelConfig').doc('settings').set({
      active: active,
      cooldownHours: cooldownHours,
      updatedAt: firebase.firestore.FieldValue.serverTimestamp()
    }, { merge: true });
    
    showSuccess('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await loadWheelConfig();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–∑–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ
async function loadWheelAdminPrizes() {
  try {
    const prizesSnapshot = await db.collection('wheelPrizes')
      .orderBy('probability', 'desc')
      .get();
    
    const prizesList = document.getElementById('wheelPrizesList');
    if (!prizesList) return;
    
    if (prizesSnapshot.empty) {
      prizesList.innerHTML = '<p style="text-align: center; color: #999;">–ù–µ—Ç –ø—Ä–∏–∑–æ–≤</p>';
      return;
    }
    
    let html = '';
    prizesSnapshot.forEach(doc => {
      const prize = doc.data();
      html += `
        <div class="prize-item" data-prize-id="${doc.id}">
          <div class="prize-item-icon">${prize.icon || 'üéÅ'}</div>
          <div class="prize-item-info">
            <div class="prize-item-name">${prize.name}</div>
            <div class="prize-item-description">${prize.description}</div>
            <span class="prize-item-probability">${prize.probability}% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å</span>
          </div>
          <div class="prize-item-actions">
            <button class="admin-btn warning" onclick="editWheelPrize('${doc.id}')">
              <i class="fas fa-edit"></i> –ò–∑–º–µ–Ω–∏—Ç—å
            </button>
            <button class="admin-btn danger" onclick="deleteWheelPrize('${doc.id}')">
              <i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å
            </button>
          </div>
        </div>
      `;
    });
    
    prizesList.innerHTML = html;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–∑–æ–≤:', error);
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞
function showAddPrizeForm() {
  const name = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–∞:');
  if (!name) return;
  
  const description = prompt('–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–∞:');
  const type = prompt('–¢–∏–ø –ø—Ä–∏–∑–∞ (bonus/promo/nothing):');
  const value = parseInt(prompt('–ó–Ω–∞—á–µ–Ω–∏–µ (–¥–ª—è –±–æ–Ω—É—Å–æ–≤ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –¥–ª—è –ø—Ä–æ–º–æ - –ø—Ä–æ—Ü–µ–Ω—Ç):')) || 0;
  const probability = parseInt(prompt('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö):')) || 10;
  const color = prompt('–¶–≤–µ—Ç (hex):') || '#ff9800';
  const icon = prompt('–ò–∫–æ–Ω–∫–∞ (emoji):') || 'üéÅ';
  
  addWheelPrize({ name, description, type, value, probability, color, icon });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞
async function addWheelPrize(prizeData) {
  try {
    await db.collection('wheelPrizes').add({
      ...prizeData,
      active: true,
      createdAt: firebase.firestore.FieldValue.serverTimestamp()
    });
    
    showSuccess('‚úÖ –ü—Ä–∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω');
    await loadWheelAdminPrizes();
    await loadWheelPrizes();
    drawWheel();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞:', error);
    showError('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞');
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞
async function deleteWheelPrize(prizeId) {
  if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–∏–∑?')) return;
  
  try {
    await db.collection('wheelPrizes').doc(prizeId).delete();
    
    showSuccess('‚úÖ –ü—Ä–∏–∑ —É–¥–∞–ª–µ–Ω');
    await loadWheelAdminPrizes();
    await loadWheelPrizes();
    drawWheel();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞:', error);
    showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞');
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –∞–¥–º–∏–Ω–∫–µ
async function loadWheelAdminHistory() {
  try {
    const spinsSnapshot = await db.collection('wheelSpins')
      .orderBy('lastSpinDate', 'desc')
      .limit(50)
      .get();
    
    const historyList = document.getElementById('wheelSpinsHistoryList');
    if (!historyList) return;
    
    if (spinsSnapshot.empty) {
      historyList.innerHTML = '<p style="text-align: center; color: #999;">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</p>';
      return;
    }
    
    let html = '';
    for (const doc of spinsSnapshot.docs) {
      const data = doc.data();
      const userId = doc.id;
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userDoc = await db.collection('users').doc(userId).get();
      const userName = userDoc.exists ? userDoc.data().displayName : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
      
      const date = data.lastSpinDate?.toDate();
      const dateStr = date ? formatDate(date) : '–ù–µ–¥–∞–≤–Ω–æ';
      
      html += `
        <div class="admin-list-item">
          <div class="item-info">
            <strong>${userName}</strong>
            <p>–ü—Ä–∏–∑: ${data.prize?.name || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}</p>
            <small>${dateStr}</small>
          </div>
          <div class="item-status ${data.prize?.claimed ? 'success' : 'pending'}">
            ${data.prize?.claimed ? '‚úì –ü–æ–ª—É—á–µ–Ω' : '‚è≥ –û–∂–∏–¥–∞–µ—Ç'}
          </div>
        </div>
      `;
    }
    
    historyList.innerHTML = html;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(date) {
  const now = new Date();
  const diff = now - date;
  const seconds = Math.floor(diff / 1000);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);
  
  if (days > 0) return `${days} –¥–Ω. –Ω–∞–∑–∞–¥`;
  if (hours > 0) return `${hours} —á. –Ω–∞–∑–∞–¥`;
  if (minutes > 0) return `${minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
  return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
}

// ========================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï
// ========================================

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–µ—Å–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ Firebase
firebase.auth().onAuthStateChanged(async (user) => {
  if (user) {
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    setTimeout(async () => {
      await initWheelOfFortune();
      await initWheelAdmin();
    }, 1000);
  }
});

console.log('üé∞ –ú–æ–¥—É–ª—å –∫–æ–ª–µ—Å–∞ —É–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω');

